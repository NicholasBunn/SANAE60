// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package powerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FetchDataClient is the client API for FetchData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FetchDataClient interface {
	FetchDataService(ctx context.Context, in *DataRequestMessage, opts ...grpc.CallOption) (*RawDataMessage, error)
}

type fetchDataClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchDataClient(cc grpc.ClientConnInterface) FetchDataClient {
	return &fetchDataClient{cc}
}

func (c *fetchDataClient) FetchDataService(ctx context.Context, in *DataRequestMessage, opts ...grpc.CallOption) (*RawDataMessage, error) {
	out := new(RawDataMessage)
	err := c.cc.Invoke(ctx, "/estimate.power.FetchData/FetchDataService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FetchDataServer is the server API for FetchData service.
// All implementations must embed UnimplementedFetchDataServer
// for forward compatibility
type FetchDataServer interface {
	FetchDataService(context.Context, *DataRequestMessage) (*RawDataMessage, error)
	mustEmbedUnimplementedFetchDataServer()
}

// UnimplementedFetchDataServer must be embedded to have forward compatible implementations.
type UnimplementedFetchDataServer struct {
}

func (UnimplementedFetchDataServer) FetchDataService(context.Context, *DataRequestMessage) (*RawDataMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDataService not implemented")
}
func (UnimplementedFetchDataServer) mustEmbedUnimplementedFetchDataServer() {}

// UnsafeFetchDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchDataServer will
// result in compilation errors.
type UnsafeFetchDataServer interface {
	mustEmbedUnimplementedFetchDataServer()
}

func RegisterFetchDataServer(s grpc.ServiceRegistrar, srv FetchDataServer) {
	s.RegisterService(&FetchData_ServiceDesc, srv)
}

func _FetchData_FetchDataService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchDataServer).FetchDataService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estimate.power.FetchData/FetchDataService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchDataServer).FetchDataService(ctx, req.(*DataRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FetchData_ServiceDesc is the grpc.ServiceDesc for FetchData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FetchData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "estimate.power.FetchData",
	HandlerType: (*FetchDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchDataService",
			Handler:    _FetchData_FetchDataService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/power_estimation.proto",
}

// PrepareDataClient is the client API for PrepareData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrepareDataClient interface {
	PrepareEstimateDataService(ctx context.Context, in *RawDataMessage, opts ...grpc.CallOption) (*PreparedDataMessage, error)
}

type prepareDataClient struct {
	cc grpc.ClientConnInterface
}

func NewPrepareDataClient(cc grpc.ClientConnInterface) PrepareDataClient {
	return &prepareDataClient{cc}
}

func (c *prepareDataClient) PrepareEstimateDataService(ctx context.Context, in *RawDataMessage, opts ...grpc.CallOption) (*PreparedDataMessage, error) {
	out := new(PreparedDataMessage)
	err := c.cc.Invoke(ctx, "/estimate.power.PrepareData/PrepareEstimateDataService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrepareDataServer is the server API for PrepareData service.
// All implementations must embed UnimplementedPrepareDataServer
// for forward compatibility
type PrepareDataServer interface {
	PrepareEstimateDataService(context.Context, *RawDataMessage) (*PreparedDataMessage, error)
	mustEmbedUnimplementedPrepareDataServer()
}

// UnimplementedPrepareDataServer must be embedded to have forward compatible implementations.
type UnimplementedPrepareDataServer struct {
}

func (UnimplementedPrepareDataServer) PrepareEstimateDataService(context.Context, *RawDataMessage) (*PreparedDataMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareEstimateDataService not implemented")
}
func (UnimplementedPrepareDataServer) mustEmbedUnimplementedPrepareDataServer() {}

// UnsafePrepareDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrepareDataServer will
// result in compilation errors.
type UnsafePrepareDataServer interface {
	mustEmbedUnimplementedPrepareDataServer()
}

func RegisterPrepareDataServer(s grpc.ServiceRegistrar, srv PrepareDataServer) {
	s.RegisterService(&PrepareData_ServiceDesc, srv)
}

func _PrepareData_PrepareEstimateDataService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawDataMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrepareDataServer).PrepareEstimateDataService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estimate.power.PrepareData/PrepareEstimateDataService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrepareDataServer).PrepareEstimateDataService(ctx, req.(*RawDataMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// PrepareData_ServiceDesc is the grpc.ServiceDesc for PrepareData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrepareData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "estimate.power.PrepareData",
	HandlerType: (*PrepareDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareEstimateDataService",
			Handler:    _PrepareData_PrepareEstimateDataService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/power_estimation.proto",
}

// PowerEstimateClient is the client API for PowerEstimate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PowerEstimateClient interface {
	EstimateService(ctx context.Context, in *EstimateRequestMessage, opts ...grpc.CallOption) (*EstimateResponseMessage, error)
}

type powerEstimateClient struct {
	cc grpc.ClientConnInterface
}

func NewPowerEstimateClient(cc grpc.ClientConnInterface) PowerEstimateClient {
	return &powerEstimateClient{cc}
}

func (c *powerEstimateClient) EstimateService(ctx context.Context, in *EstimateRequestMessage, opts ...grpc.CallOption) (*EstimateResponseMessage, error) {
	out := new(EstimateResponseMessage)
	err := c.cc.Invoke(ctx, "/estimate.power.PowerEstimate/EstimateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PowerEstimateServer is the server API for PowerEstimate service.
// All implementations must embed UnimplementedPowerEstimateServer
// for forward compatibility
type PowerEstimateServer interface {
	EstimateService(context.Context, *EstimateRequestMessage) (*EstimateResponseMessage, error)
	mustEmbedUnimplementedPowerEstimateServer()
}

// UnimplementedPowerEstimateServer must be embedded to have forward compatible implementations.
type UnimplementedPowerEstimateServer struct {
}

func (UnimplementedPowerEstimateServer) EstimateService(context.Context, *EstimateRequestMessage) (*EstimateResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateService not implemented")
}
func (UnimplementedPowerEstimateServer) mustEmbedUnimplementedPowerEstimateServer() {}

// UnsafePowerEstimateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PowerEstimateServer will
// result in compilation errors.
type UnsafePowerEstimateServer interface {
	mustEmbedUnimplementedPowerEstimateServer()
}

func RegisterPowerEstimateServer(s grpc.ServiceRegistrar, srv PowerEstimateServer) {
	s.RegisterService(&PowerEstimate_ServiceDesc, srv)
}

func _PowerEstimate_EstimateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerEstimateServer).EstimateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estimate.power.PowerEstimate/EstimateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerEstimateServer).EstimateService(ctx, req.(*EstimateRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// PowerEstimate_ServiceDesc is the grpc.ServiceDesc for PowerEstimate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PowerEstimate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "estimate.power.PowerEstimate",
	HandlerType: (*PowerEstimateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimateService",
			Handler:    _PowerEstimate_EstimateService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/power_estimation.proto",
}

// PowerEstimationServicePackageClient is the client API for PowerEstimationServicePackage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PowerEstimationServicePackageClient interface {
	EstimatorService(ctx context.Context, in *ServicePackageRequestMessage, opts ...grpc.CallOption) (*EstimateResponseServiceMessage, error)
	EvaluatorService(ctx context.Context, in *ServicePackageRequestMessage, opts ...grpc.CallOption) (*EvaluateResponseServiceMessage, error)
}

type powerEstimationServicePackageClient struct {
	cc grpc.ClientConnInterface
}

func NewPowerEstimationServicePackageClient(cc grpc.ClientConnInterface) PowerEstimationServicePackageClient {
	return &powerEstimationServicePackageClient{cc}
}

func (c *powerEstimationServicePackageClient) EstimatorService(ctx context.Context, in *ServicePackageRequestMessage, opts ...grpc.CallOption) (*EstimateResponseServiceMessage, error) {
	out := new(EstimateResponseServiceMessage)
	err := c.cc.Invoke(ctx, "/estimate.power.PowerEstimationServicePackage/EstimatorService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerEstimationServicePackageClient) EvaluatorService(ctx context.Context, in *ServicePackageRequestMessage, opts ...grpc.CallOption) (*EvaluateResponseServiceMessage, error) {
	out := new(EvaluateResponseServiceMessage)
	err := c.cc.Invoke(ctx, "/estimate.power.PowerEstimationServicePackage/EvaluatorService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PowerEstimationServicePackageServer is the server API for PowerEstimationServicePackage service.
// All implementations must embed UnimplementedPowerEstimationServicePackageServer
// for forward compatibility
type PowerEstimationServicePackageServer interface {
	EstimatorService(context.Context, *ServicePackageRequestMessage) (*EstimateResponseServiceMessage, error)
	EvaluatorService(context.Context, *ServicePackageRequestMessage) (*EvaluateResponseServiceMessage, error)
	mustEmbedUnimplementedPowerEstimationServicePackageServer()
}

// UnimplementedPowerEstimationServicePackageServer must be embedded to have forward compatible implementations.
type UnimplementedPowerEstimationServicePackageServer struct {
}

func (UnimplementedPowerEstimationServicePackageServer) EstimatorService(context.Context, *ServicePackageRequestMessage) (*EstimateResponseServiceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimatorService not implemented")
}
func (UnimplementedPowerEstimationServicePackageServer) EvaluatorService(context.Context, *ServicePackageRequestMessage) (*EvaluateResponseServiceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluatorService not implemented")
}
func (UnimplementedPowerEstimationServicePackageServer) mustEmbedUnimplementedPowerEstimationServicePackageServer() {
}

// UnsafePowerEstimationServicePackageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PowerEstimationServicePackageServer will
// result in compilation errors.
type UnsafePowerEstimationServicePackageServer interface {
	mustEmbedUnimplementedPowerEstimationServicePackageServer()
}

func RegisterPowerEstimationServicePackageServer(s grpc.ServiceRegistrar, srv PowerEstimationServicePackageServer) {
	s.RegisterService(&PowerEstimationServicePackage_ServiceDesc, srv)
}

func _PowerEstimationServicePackage_EstimatorService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicePackageRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerEstimationServicePackageServer).EstimatorService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estimate.power.PowerEstimationServicePackage/EstimatorService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerEstimationServicePackageServer).EstimatorService(ctx, req.(*ServicePackageRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerEstimationServicePackage_EvaluatorService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicePackageRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerEstimationServicePackageServer).EvaluatorService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estimate.power.PowerEstimationServicePackage/EvaluatorService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerEstimationServicePackageServer).EvaluatorService(ctx, req.(*ServicePackageRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// PowerEstimationServicePackage_ServiceDesc is the grpc.ServiceDesc for PowerEstimationServicePackage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PowerEstimationServicePackage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "estimate.power.PowerEstimationServicePackage",
	HandlerType: (*PowerEstimationServicePackageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimatorService",
			Handler:    _PowerEstimationServicePackage_EstimatorService_Handler,
		},
		{
			MethodName: "EvaluatorService",
			Handler:    _PowerEstimationServicePackage_EvaluatorService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/power_estimation.proto",
}
