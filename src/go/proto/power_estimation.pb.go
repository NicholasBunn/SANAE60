// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: proto/power_estimation.proto

package powerpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModelTypeEnum int32

const (
	ModelTypeEnum_UNKNOWN   ModelTypeEnum = 0
	ModelTypeEnum_OPENWATER ModelTypeEnum = 1
	ModelTypeEnum_ICE       ModelTypeEnum = 2
)

// Enum value maps for ModelTypeEnum.
var (
	ModelTypeEnum_name = map[int32]string{
		0: "UNKNOWN",
		1: "OPENWATER",
		2: "ICE",
	}
	ModelTypeEnum_value = map[string]int32{
		"UNKNOWN":   0,
		"OPENWATER": 1,
		"ICE":       2,
	}
)

func (x ModelTypeEnum) Enum() *ModelTypeEnum {
	p := new(ModelTypeEnum)
	*p = x
	return p
}

func (x ModelTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_power_estimation_proto_enumTypes[0].Descriptor()
}

func (ModelTypeEnum) Type() protoreflect.EnumType {
	return &file_proto_power_estimation_proto_enumTypes[0]
}

func (x ModelTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelTypeEnum.Descriptor instead.
func (ModelTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_power_estimation_proto_rawDescGZIP(), []int{0}
}

type ServicePackageRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputFile string        `protobuf:"bytes,1,opt,name=input_file,json=inputFile,proto3" json:"input_file,omitempty"`
	ModelType ModelTypeEnum `protobuf:"varint,2,opt,name=model_type,json=modelType,proto3,enum=estimate.power.ModelTypeEnum" json:"model_type,omitempty"`
}

func (x *ServicePackageRequestMessage) Reset() {
	*x = ServicePackageRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_power_estimation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePackageRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePackageRequestMessage) ProtoMessage() {}

func (x *ServicePackageRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_power_estimation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePackageRequestMessage.ProtoReflect.Descriptor instead.
func (*ServicePackageRequestMessage) Descriptor() ([]byte, []int) {
	return file_proto_power_estimation_proto_rawDescGZIP(), []int{0}
}

func (x *ServicePackageRequestMessage) GetInputFile() string {
	if x != nil {
		return x.InputFile
	}
	return ""
}

func (x *ServicePackageRequestMessage) GetModelType() ModelTypeEnum {
	if x != nil {
		return x.ModelType
	}
	return ModelTypeEnum_UNKNOWN
}

// RENAME THIS TOO
type EstimateResponseServiceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerEstimate []float32 `protobuf:"fixed32,1,rep,packed,name=power_estimate,json=powerEstimate,proto3" json:"power_estimate,omitempty"`
}

func (x *EstimateResponseServiceMessage) Reset() {
	*x = EstimateResponseServiceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_power_estimation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateResponseServiceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateResponseServiceMessage) ProtoMessage() {}

func (x *EstimateResponseServiceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_power_estimation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateResponseServiceMessage.ProtoReflect.Descriptor instead.
func (*EstimateResponseServiceMessage) Descriptor() ([]byte, []int) {
	return file_proto_power_estimation_proto_rawDescGZIP(), []int{1}
}

func (x *EstimateResponseServiceMessage) GetPowerEstimate() []float32 {
	if x != nil {
		return x.PowerEstimate
	}
	return nil
}

// RENAME THESE ONCE YOU'VE RE_ORGANISED EVERYTHING
type EvaluateResponseServiceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerEstimate   []float32 `protobuf:"fixed32,1,rep,packed,name=power_estimate,json=powerEstimate,proto3" json:"power_estimate,omitempty"`
	PowerActual     []float32 `protobuf:"fixed32,2,rep,packed,name=power_actual,json=powerActual,proto3" json:"power_actual,omitempty"`
	SpeedOverGround []float32 `protobuf:"fixed32,3,rep,packed,name=speed_over_ground,json=speedOverGround,proto3" json:"speed_over_ground,omitempty"`
}

func (x *EvaluateResponseServiceMessage) Reset() {
	*x = EvaluateResponseServiceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_power_estimation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateResponseServiceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateResponseServiceMessage) ProtoMessage() {}

func (x *EvaluateResponseServiceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_power_estimation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateResponseServiceMessage.ProtoReflect.Descriptor instead.
func (*EvaluateResponseServiceMessage) Descriptor() ([]byte, []int) {
	return file_proto_power_estimation_proto_rawDescGZIP(), []int{2}
}

func (x *EvaluateResponseServiceMessage) GetPowerEstimate() []float32 {
	if x != nil {
		return x.PowerEstimate
	}
	return nil
}

func (x *EvaluateResponseServiceMessage) GetPowerActual() []float32 {
	if x != nil {
		return x.PowerActual
	}
	return nil
}

func (x *EvaluateResponseServiceMessage) GetSpeedOverGround() []float32 {
	if x != nil {
		return x.SpeedOverGround
	}
	return nil
}

type DataRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputFile string `protobuf:"bytes,1,opt,name=input_file,json=inputFile,proto3" json:"input_file,omitempty"`
}

func (x *DataRequestMessage) Reset() {
	*x = DataRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_power_estimation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequestMessage) ProtoMessage() {}

func (x *DataRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_power_estimation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequestMessage.ProtoReflect.Descriptor instead.
func (*DataRequestMessage) Descriptor() ([]byte, []int) {
	return file_proto_power_estimation_proto_rawDescGZIP(), []int{3}
}

func (x *DataRequestMessage) GetInputFile() string {
	if x != nil {
		return x.InputFile
	}
	return ""
}

type RawDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexNumber            []int64   `protobuf:"varint,1,rep,packed,name=index_number,json=indexNumber,proto3" json:"index_number,omitempty"`
	TimeAndDate            []float32 `protobuf:"fixed32,2,rep,packed,name=time_and_date,json=timeAndDate,proto3" json:"time_and_date,omitempty"`
	PortPropMotorCurrent   []float32 `protobuf:"fixed32,3,rep,packed,name=port_prop_motor_current,json=portPropMotorCurrent,proto3" json:"port_prop_motor_current,omitempty"`
	PortPropMotorPower     []float32 `protobuf:"fixed32,4,rep,packed,name=port_prop_motor_power,json=portPropMotorPower,proto3" json:"port_prop_motor_power,omitempty"`
	PortPropMotorSpeed     []float32 `protobuf:"fixed32,5,rep,packed,name=port_prop_motor_speed,json=portPropMotorSpeed,proto3" json:"port_prop_motor_speed,omitempty"`
	PortPropMotorVoltage   []float32 `protobuf:"fixed32,6,rep,packed,name=port_prop_motor_voltage,json=portPropMotorVoltage,proto3" json:"port_prop_motor_voltage,omitempty"`
	StbdPropMotorCurrent   []float32 `protobuf:"fixed32,7,rep,packed,name=stbd_prop_motor_current,json=stbdPropMotorCurrent,proto3" json:"stbd_prop_motor_current,omitempty"`
	StbdPropMotorPower     []float32 `protobuf:"fixed32,8,rep,packed,name=stbd_prop_motor_power,json=stbdPropMotorPower,proto3" json:"stbd_prop_motor_power,omitempty"`
	StbdPropMotorSpeed     []float32 `protobuf:"fixed32,9,rep,packed,name=stbd_prop_motor_speed,json=stbdPropMotorSpeed,proto3" json:"stbd_prop_motor_speed,omitempty"`
	StbdPropMotorVoltage   []float32 `protobuf:"fixed32,10,rep,packed,name=stbd_prop_motor_voltage,json=stbdPropMotorVoltage,proto3" json:"stbd_prop_motor_voltage,omitempty"`
	RudderOrderPort        []float32 `protobuf:"fixed32,11,rep,packed,name=rudder_order_port,json=rudderOrderPort,proto3" json:"rudder_order_port,omitempty"`
	RudderOrderStbd        []float32 `protobuf:"fixed32,12,rep,packed,name=rudder_order_stbd,json=rudderOrderStbd,proto3" json:"rudder_order_stbd,omitempty"`
	RudderPositionPort     []float32 `protobuf:"fixed32,13,rep,packed,name=rudder_position_port,json=rudderPositionPort,proto3" json:"rudder_position_port,omitempty"`
	RudderPositionStbd     []float32 `protobuf:"fixed32,14,rep,packed,name=rudder_position_stbd,json=rudderPositionStbd,proto3" json:"rudder_position_stbd,omitempty"`
	PropellerPitchPort     []float32 `protobuf:"fixed32,15,rep,packed,name=propeller_pitch_port,json=propellerPitchPort,proto3" json:"propeller_pitch_port,omitempty"`
	PropellerPitchStbd     []float32 `protobuf:"fixed32,16,rep,packed,name=propeller_pitch_stbd,json=propellerPitchStbd,proto3" json:"propeller_pitch_stbd,omitempty"`
	ShaftRpmIndicationPort []float32 `protobuf:"fixed32,17,rep,packed,name=shaft_rpm_indication_port,json=shaftRpmIndicationPort,proto3" json:"shaft_rpm_indication_port,omitempty"`
	ShaftRpmIndicationStbd []float32 `protobuf:"fixed32,18,rep,packed,name=shaft_rpm_indication_stbd,json=shaftRpmIndicationStbd,proto3" json:"shaft_rpm_indication_stbd,omitempty"`
	NavTime                []int64   `protobuf:"varint,19,rep,packed,name=nav_time,json=navTime,proto3" json:"nav_time,omitempty"`
	Latitude               []float32 `protobuf:"fixed32,20,rep,packed,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude              []float32 `protobuf:"fixed32,21,rep,packed,name=longitude,proto3" json:"longitude,omitempty"`
	Sog                    []float32 `protobuf:"fixed32,22,rep,packed,name=sog,proto3" json:"sog,omitempty"`
	Cog                    []float32 `protobuf:"fixed32,23,rep,packed,name=cog,proto3" json:"cog,omitempty"`
	Hdt                    []float32 `protobuf:"fixed32,24,rep,packed,name=hdt,proto3" json:"hdt,omitempty"`
	WindDirectionRelative  []int64   `protobuf:"varint,25,rep,packed,name=wind_direction_relative,json=windDirectionRelative,proto3" json:"wind_direction_relative,omitempty"`
	WindSpeed              []float32 `protobuf:"fixed32,26,rep,packed,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	Depth                  []float32 `protobuf:"fixed32,27,rep,packed,name=depth,proto3" json:"depth,omitempty"`
	EpochTime              []int64   `protobuf:"varint,28,rep,packed,name=epoch_time,json=epochTime,proto3" json:"epoch_time,omitempty"`
	BrashIce               []int64   `protobuf:"varint,29,rep,packed,name=brash_ice,json=brashIce,proto3" json:"brash_ice,omitempty"`
	RammingCount           []int64   `protobuf:"varint,30,rep,packed,name=ramming_count,json=rammingCount,proto3" json:"ramming_count,omitempty"`
	IceConcentration       []int64   `protobuf:"varint,31,rep,packed,name=ice_concentration,json=iceConcentration,proto3" json:"ice_concentration,omitempty"`
	IceThickness           []int64   `protobuf:"varint,32,rep,packed,name=ice_thickness,json=iceThickness,proto3" json:"ice_thickness,omitempty"`
	FlowSize               []int64   `protobuf:"varint,33,rep,packed,name=flow_size,json=flowSize,proto3" json:"flow_size,omitempty"`
	BeaufortNumber         []int64   `protobuf:"varint,34,rep,packed,name=beaufort_number,json=beaufortNumber,proto3" json:"beaufort_number,omitempty"`
	WaveDirection          []int64   `protobuf:"varint,35,rep,packed,name=wave_direction,json=waveDirection,proto3" json:"wave_direction,omitempty"`
	WaveHeightAve          []float32 `protobuf:"fixed32,36,rep,packed,name=wave_height_ave,json=waveHeightAve,proto3" json:"wave_height_ave,omitempty"`
	MaxSwellHeight         []float32 `protobuf:"fixed32,37,rep,packed,name=max_swell_height,json=maxSwellHeight,proto3" json:"max_swell_height,omitempty"`
	WaveLength             []float32 `protobuf:"fixed32,38,rep,packed,name=wave_length,json=waveLength,proto3" json:"wave_length,omitempty"`
	WavePeriodAve          []float32 `protobuf:"fixed32,39,rep,packed,name=wave_period_ave,json=wavePeriodAve,proto3" json:"wave_period_ave,omitempty"`
	EncounterFrequencyAve  []float32 `protobuf:"fixed32,40,rep,packed,name=encounter_frequency_ave,json=encounterFrequencyAve,proto3" json:"encounter_frequency_ave,omitempty"`
}

func (x *RawDataMessage) Reset() {
	*x = RawDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_power_estimation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawDataMessage) ProtoMessage() {}

func (x *RawDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_power_estimation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawDataMessage.ProtoReflect.Descriptor instead.
func (*RawDataMessage) Descriptor() ([]byte, []int) {
	return file_proto_power_estimation_proto_rawDescGZIP(), []int{4}
}

func (x *RawDataMessage) GetIndexNumber() []int64 {
	if x != nil {
		return x.IndexNumber
	}
	return nil
}

func (x *RawDataMessage) GetTimeAndDate() []float32 {
	if x != nil {
		return x.TimeAndDate
	}
	return nil
}

func (x *RawDataMessage) GetPortPropMotorCurrent() []float32 {
	if x != nil {
		return x.PortPropMotorCurrent
	}
	return nil
}

func (x *RawDataMessage) GetPortPropMotorPower() []float32 {
	if x != nil {
		return x.PortPropMotorPower
	}
	return nil
}

func (x *RawDataMessage) GetPortPropMotorSpeed() []float32 {
	if x != nil {
		return x.PortPropMotorSpeed
	}
	return nil
}

func (x *RawDataMessage) GetPortPropMotorVoltage() []float32 {
	if x != nil {
		return x.PortPropMotorVoltage
	}
	return nil
}

func (x *RawDataMessage) GetStbdPropMotorCurrent() []float32 {
	if x != nil {
		return x.StbdPropMotorCurrent
	}
	return nil
}

func (x *RawDataMessage) GetStbdPropMotorPower() []float32 {
	if x != nil {
		return x.StbdPropMotorPower
	}
	return nil
}

func (x *RawDataMessage) GetStbdPropMotorSpeed() []float32 {
	if x != nil {
		return x.StbdPropMotorSpeed
	}
	return nil
}

func (x *RawDataMessage) GetStbdPropMotorVoltage() []float32 {
	if x != nil {
		return x.StbdPropMotorVoltage
	}
	return nil
}

func (x *RawDataMessage) GetRudderOrderPort() []float32 {
	if x != nil {
		return x.RudderOrderPort
	}
	return nil
}

func (x *RawDataMessage) GetRudderOrderStbd() []float32 {
	if x != nil {
		return x.RudderOrderStbd
	}
	return nil
}

func (x *RawDataMessage) GetRudderPositionPort() []float32 {
	if x != nil {
		return x.RudderPositionPort
	}
	return nil
}

func (x *RawDataMessage) GetRudderPositionStbd() []float32 {
	if x != nil {
		return x.RudderPositionStbd
	}
	return nil
}

func (x *RawDataMessage) GetPropellerPitchPort() []float32 {
	if x != nil {
		return x.PropellerPitchPort
	}
	return nil
}

func (x *RawDataMessage) GetPropellerPitchStbd() []float32 {
	if x != nil {
		return x.PropellerPitchStbd
	}
	return nil
}

func (x *RawDataMessage) GetShaftRpmIndicationPort() []float32 {
	if x != nil {
		return x.ShaftRpmIndicationPort
	}
	return nil
}

func (x *RawDataMessage) GetShaftRpmIndicationStbd() []float32 {
	if x != nil {
		return x.ShaftRpmIndicationStbd
	}
	return nil
}

func (x *RawDataMessage) GetNavTime() []int64 {
	if x != nil {
		return x.NavTime
	}
	return nil
}

func (x *RawDataMessage) GetLatitude() []float32 {
	if x != nil {
		return x.Latitude
	}
	return nil
}

func (x *RawDataMessage) GetLongitude() []float32 {
	if x != nil {
		return x.Longitude
	}
	return nil
}

func (x *RawDataMessage) GetSog() []float32 {
	if x != nil {
		return x.Sog
	}
	return nil
}

func (x *RawDataMessage) GetCog() []float32 {
	if x != nil {
		return x.Cog
	}
	return nil
}

func (x *RawDataMessage) GetHdt() []float32 {
	if x != nil {
		return x.Hdt
	}
	return nil
}

func (x *RawDataMessage) GetWindDirectionRelative() []int64 {
	if x != nil {
		return x.WindDirectionRelative
	}
	return nil
}

func (x *RawDataMessage) GetWindSpeed() []float32 {
	if x != nil {
		return x.WindSpeed
	}
	return nil
}

func (x *RawDataMessage) GetDepth() []float32 {
	if x != nil {
		return x.Depth
	}
	return nil
}

func (x *RawDataMessage) GetEpochTime() []int64 {
	if x != nil {
		return x.EpochTime
	}
	return nil
}

func (x *RawDataMessage) GetBrashIce() []int64 {
	if x != nil {
		return x.BrashIce
	}
	return nil
}

func (x *RawDataMessage) GetRammingCount() []int64 {
	if x != nil {
		return x.RammingCount
	}
	return nil
}

func (x *RawDataMessage) GetIceConcentration() []int64 {
	if x != nil {
		return x.IceConcentration
	}
	return nil
}

func (x *RawDataMessage) GetIceThickness() []int64 {
	if x != nil {
		return x.IceThickness
	}
	return nil
}

func (x *RawDataMessage) GetFlowSize() []int64 {
	if x != nil {
		return x.FlowSize
	}
	return nil
}

func (x *RawDataMessage) GetBeaufortNumber() []int64 {
	if x != nil {
		return x.BeaufortNumber
	}
	return nil
}

func (x *RawDataMessage) GetWaveDirection() []int64 {
	if x != nil {
		return x.WaveDirection
	}
	return nil
}

func (x *RawDataMessage) GetWaveHeightAve() []float32 {
	if x != nil {
		return x.WaveHeightAve
	}
	return nil
}

func (x *RawDataMessage) GetMaxSwellHeight() []float32 {
	if x != nil {
		return x.MaxSwellHeight
	}
	return nil
}

func (x *RawDataMessage) GetWaveLength() []float32 {
	if x != nil {
		return x.WaveLength
	}
	return nil
}

func (x *RawDataMessage) GetWavePeriodAve() []float32 {
	if x != nil {
		return x.WavePeriodAve
	}
	return nil
}

func (x *RawDataMessage) GetEncounterFrequencyAve() []float32 {
	if x != nil {
		return x.EncounterFrequencyAve
	}
	return nil
}

type PreparedDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortPropMotorSpeed    []float32 `protobuf:"fixed32,1,rep,packed,name=port_prop_motor_speed,json=portPropMotorSpeed,proto3" json:"port_prop_motor_speed,omitempty"`
	StbdPropMotorSpeed    []float32 `protobuf:"fixed32,2,rep,packed,name=stbd_prop_motor_speed,json=stbdPropMotorSpeed,proto3" json:"stbd_prop_motor_speed,omitempty"`
	PropellerPitchPort    []float32 `protobuf:"fixed32,3,rep,packed,name=propeller_pitch_port,json=propellerPitchPort,proto3" json:"propeller_pitch_port,omitempty"`
	PropellerPitchStbd    []float32 `protobuf:"fixed32,4,rep,packed,name=propeller_pitch_stbd,json=propellerPitchStbd,proto3" json:"propeller_pitch_stbd,omitempty"`
	Sog                   []float32 `protobuf:"fixed32,5,rep,packed,name=sog,proto3" json:"sog,omitempty"`
	WindDirectionRelative []float32 `protobuf:"fixed32,6,rep,packed,name=wind_direction_relative,json=windDirectionRelative,proto3" json:"wind_direction_relative,omitempty"`
	WindSpeed             []float32 `protobuf:"fixed32,7,rep,packed,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	BeaufortNumber        []float32 `protobuf:"fixed32,8,rep,packed,name=beaufort_number,json=beaufortNumber,proto3" json:"beaufort_number,omitempty"`
	WaveDirection         []float32 `protobuf:"fixed32,9,rep,packed,name=wave_direction,json=waveDirection,proto3" json:"wave_direction,omitempty"`
	WaveLength            []float32 `protobuf:"fixed32,10,rep,packed,name=wave_length,json=waveLength,proto3" json:"wave_length,omitempty"`
}

func (x *PreparedDataMessage) Reset() {
	*x = PreparedDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_power_estimation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreparedDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreparedDataMessage) ProtoMessage() {}

func (x *PreparedDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_power_estimation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreparedDataMessage.ProtoReflect.Descriptor instead.
func (*PreparedDataMessage) Descriptor() ([]byte, []int) {
	return file_proto_power_estimation_proto_rawDescGZIP(), []int{5}
}

func (x *PreparedDataMessage) GetPortPropMotorSpeed() []float32 {
	if x != nil {
		return x.PortPropMotorSpeed
	}
	return nil
}

func (x *PreparedDataMessage) GetStbdPropMotorSpeed() []float32 {
	if x != nil {
		return x.StbdPropMotorSpeed
	}
	return nil
}

func (x *PreparedDataMessage) GetPropellerPitchPort() []float32 {
	if x != nil {
		return x.PropellerPitchPort
	}
	return nil
}

func (x *PreparedDataMessage) GetPropellerPitchStbd() []float32 {
	if x != nil {
		return x.PropellerPitchStbd
	}
	return nil
}

func (x *PreparedDataMessage) GetSog() []float32 {
	if x != nil {
		return x.Sog
	}
	return nil
}

func (x *PreparedDataMessage) GetWindDirectionRelative() []float32 {
	if x != nil {
		return x.WindDirectionRelative
	}
	return nil
}

func (x *PreparedDataMessage) GetWindSpeed() []float32 {
	if x != nil {
		return x.WindSpeed
	}
	return nil
}

func (x *PreparedDataMessage) GetBeaufortNumber() []float32 {
	if x != nil {
		return x.BeaufortNumber
	}
	return nil
}

func (x *PreparedDataMessage) GetWaveDirection() []float32 {
	if x != nil {
		return x.WaveDirection
	}
	return nil
}

func (x *PreparedDataMessage) GetWaveLength() []float32 {
	if x != nil {
		return x.WaveLength
	}
	return nil
}

type EstimateRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortPropMotorSpeed    []float32     `protobuf:"fixed32,1,rep,packed,name=port_prop_motor_speed,json=portPropMotorSpeed,proto3" json:"port_prop_motor_speed,omitempty"`
	StbdPropMotorSpeed    []float32     `protobuf:"fixed32,2,rep,packed,name=stbd_prop_motor_speed,json=stbdPropMotorSpeed,proto3" json:"stbd_prop_motor_speed,omitempty"`
	PropellerPitchPort    []float32     `protobuf:"fixed32,3,rep,packed,name=propeller_pitch_port,json=propellerPitchPort,proto3" json:"propeller_pitch_port,omitempty"`
	PropellerPitchStbd    []float32     `protobuf:"fixed32,4,rep,packed,name=propeller_pitch_stbd,json=propellerPitchStbd,proto3" json:"propeller_pitch_stbd,omitempty"`
	Sog                   []float32     `protobuf:"fixed32,5,rep,packed,name=sog,proto3" json:"sog,omitempty"`
	WindDirectionRelative []float32     `protobuf:"fixed32,6,rep,packed,name=wind_direction_relative,json=windDirectionRelative,proto3" json:"wind_direction_relative,omitempty"`
	WindSpeed             []float32     `protobuf:"fixed32,7,rep,packed,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	BeaufortNumber        []float32     `protobuf:"fixed32,8,rep,packed,name=beaufort_number,json=beaufortNumber,proto3" json:"beaufort_number,omitempty"`
	WaveDirection         []float32     `protobuf:"fixed32,9,rep,packed,name=wave_direction,json=waveDirection,proto3" json:"wave_direction,omitempty"`
	WaveLength            []float32     `protobuf:"fixed32,10,rep,packed,name=wave_length,json=waveLength,proto3" json:"wave_length,omitempty"`
	MotorPowerPort        []float32     `protobuf:"fixed32,11,rep,packed,name=motor_power_port,json=motorPowerPort,proto3" json:"motor_power_port,omitempty"`
	MotorPowerStbd        []float32     `protobuf:"fixed32,12,rep,packed,name=motor_power_stbd,json=motorPowerStbd,proto3" json:"motor_power_stbd,omitempty"`
	OriginalSog           []float32     `protobuf:"fixed32,13,rep,packed,name=original_sog,json=originalSog,proto3" json:"original_sog,omitempty"`
	ModelType             ModelTypeEnum `protobuf:"varint,14,opt,name=model_type,json=modelType,proto3,enum=estimate.power.ModelTypeEnum" json:"model_type,omitempty"`
}

func (x *EstimateRequestMessage) Reset() {
	*x = EstimateRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_power_estimation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateRequestMessage) ProtoMessage() {}

func (x *EstimateRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_power_estimation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateRequestMessage.ProtoReflect.Descriptor instead.
func (*EstimateRequestMessage) Descriptor() ([]byte, []int) {
	return file_proto_power_estimation_proto_rawDescGZIP(), []int{6}
}

func (x *EstimateRequestMessage) GetPortPropMotorSpeed() []float32 {
	if x != nil {
		return x.PortPropMotorSpeed
	}
	return nil
}

func (x *EstimateRequestMessage) GetStbdPropMotorSpeed() []float32 {
	if x != nil {
		return x.StbdPropMotorSpeed
	}
	return nil
}

func (x *EstimateRequestMessage) GetPropellerPitchPort() []float32 {
	if x != nil {
		return x.PropellerPitchPort
	}
	return nil
}

func (x *EstimateRequestMessage) GetPropellerPitchStbd() []float32 {
	if x != nil {
		return x.PropellerPitchStbd
	}
	return nil
}

func (x *EstimateRequestMessage) GetSog() []float32 {
	if x != nil {
		return x.Sog
	}
	return nil
}

func (x *EstimateRequestMessage) GetWindDirectionRelative() []float32 {
	if x != nil {
		return x.WindDirectionRelative
	}
	return nil
}

func (x *EstimateRequestMessage) GetWindSpeed() []float32 {
	if x != nil {
		return x.WindSpeed
	}
	return nil
}

func (x *EstimateRequestMessage) GetBeaufortNumber() []float32 {
	if x != nil {
		return x.BeaufortNumber
	}
	return nil
}

func (x *EstimateRequestMessage) GetWaveDirection() []float32 {
	if x != nil {
		return x.WaveDirection
	}
	return nil
}

func (x *EstimateRequestMessage) GetWaveLength() []float32 {
	if x != nil {
		return x.WaveLength
	}
	return nil
}

func (x *EstimateRequestMessage) GetMotorPowerPort() []float32 {
	if x != nil {
		return x.MotorPowerPort
	}
	return nil
}

func (x *EstimateRequestMessage) GetMotorPowerStbd() []float32 {
	if x != nil {
		return x.MotorPowerStbd
	}
	return nil
}

func (x *EstimateRequestMessage) GetOriginalSog() []float32 {
	if x != nil {
		return x.OriginalSog
	}
	return nil
}

func (x *EstimateRequestMessage) GetModelType() ModelTypeEnum {
	if x != nil {
		return x.ModelType
	}
	return ModelTypeEnum_UNKNOWN
}

type EstimateResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerEstimate   []float32 `protobuf:"fixed32,1,rep,packed,name=power_estimate,json=powerEstimate,proto3" json:"power_estimate,omitempty"`
	PowerActual     []float32 `protobuf:"fixed32,2,rep,packed,name=power_actual,json=powerActual,proto3" json:"power_actual,omitempty"`
	SpeedOverGround []float32 `protobuf:"fixed32,3,rep,packed,name=speed_over_ground,json=speedOverGround,proto3" json:"speed_over_ground,omitempty"`
}

func (x *EstimateResponseMessage) Reset() {
	*x = EstimateResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_power_estimation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateResponseMessage) ProtoMessage() {}

func (x *EstimateResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_power_estimation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateResponseMessage.ProtoReflect.Descriptor instead.
func (*EstimateResponseMessage) Descriptor() ([]byte, []int) {
	return file_proto_power_estimation_proto_rawDescGZIP(), []int{7}
}

func (x *EstimateResponseMessage) GetPowerEstimate() []float32 {
	if x != nil {
		return x.PowerEstimate
	}
	return nil
}

func (x *EstimateResponseMessage) GetPowerActual() []float32 {
	if x != nil {
		return x.PowerActual
	}
	return nil
}

func (x *EstimateResponseMessage) GetSpeedOverGround() []float32 {
	if x != nil {
		return x.SpeedOverGround
	}
	return nil
}

var File_proto_power_estimation_proto protoreflect.FileDescriptor

var file_proto_power_estimation_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x7b,
	0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x1e, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x0d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x33, 0x0a,
	0x12, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x22, 0x80, 0x0d, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x14, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x5f, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x74, 0x6f,
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d,
	0x6f, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x14, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x62, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x6f,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x14, 0x73, 0x74, 0x62, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x74, 0x6f, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x62, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x02, 0x52, 0x12, 0x73, 0x74, 0x62, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74,
	0x62, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x02, 0x52, 0x12, 0x73, 0x74, 0x62, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x73, 0x74, 0x62, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x74, 0x6f, 0x72,
	0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x14,
	0x73, 0x74, 0x62, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x0f, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x62, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x75, 0x64,
	0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x62, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x02, 0x52, 0x12, 0x72, 0x75, 0x64, 0x64,
	0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x62, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x02, 0x52, 0x12, 0x72, 0x75,
	0x64, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x62, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x02, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x62, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x62, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x68, 0x61, 0x66, 0x74, 0x5f, 0x72, 0x70,
	0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x02, 0x52, 0x16, 0x73, 0x68, 0x61, 0x66, 0x74, 0x52, 0x70,
	0x6d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x39, 0x0a, 0x19, 0x73, 0x68, 0x61, 0x66, 0x74, 0x5f, 0x72, 0x70, 0x6d, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x62, 0x64, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x16, 0x73, 0x68, 0x61, 0x66, 0x74, 0x52, 0x70, 0x6d, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x62, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x61,
	0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x61,
	0x76, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x6f, 0x67, 0x18, 0x16, 0x20, 0x03, 0x28, 0x02, 0x52, 0x03, 0x73, 0x6f,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x67, 0x18, 0x17, 0x20, 0x03, 0x28, 0x02, 0x52, 0x03,
	0x63, 0x6f, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x64, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x03, 0x68, 0x64, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x63, 0x65, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x62, 0x72, 0x61, 0x73, 0x68, 0x49, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x63, 0x65, 0x54, 0x68, 0x69, 0x63,
	0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x65, 0x61, 0x75, 0x66, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x22, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x65, 0x61,
	0x75, 0x66, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x61, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0d, 0x77, 0x61, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x61, 0x76, 0x65, 0x18, 0x24, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x77, 0x61, 0x76,
	0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x53, 0x77, 0x65, 0x6c, 0x6c, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x26, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x18, 0x27, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d,
	0x77, 0x61, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x76, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x76, 0x65, 0x18, 0x28, 0x20, 0x03, 0x28, 0x02, 0x52, 0x15,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x41, 0x76, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x12, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x62, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x6f,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x12, 0x73, 0x74, 0x62, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x69, 0x74, 0x63,
	0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x62, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x62, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6f, 0x67, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x03, 0x73, 0x6f, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x69, 0x6e,
	0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x15, 0x77, 0x69, 0x6e, 0x64,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x65, 0x61, 0x75, 0x66, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e, 0x62, 0x65, 0x61, 0x75, 0x66,
	0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x76,
	0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x0d, 0x77, 0x61, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0xf1, 0x04, 0x0a, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x12, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x31, 0x0a, 0x15, 0x73, 0x74, 0x62, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x12,
	0x73, 0x74, 0x62, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x69, 0x74, 0x63, 0x68,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x62, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x62, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6f, 0x67, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x03, 0x73, 0x6f, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x69, 0x6e, 0x64,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x15, 0x77, 0x69, 0x6e, 0x64, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x65, 0x61, 0x75, 0x66, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e, 0x62, 0x65, 0x61, 0x75, 0x66, 0x6f,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x76, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x0d, 0x77, 0x61, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x6f,
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x62, 0x64, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x74, 0x62, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x6f, 0x67, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x67, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2a, 0x34, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x45, 0x4e, 0x57, 0x41, 0x54,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x43, 0x45, 0x10, 0x02, 0x32, 0x63, 0x0a,
	0x09, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x10, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22,
	0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x70, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x61, 0x0a, 0x1a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1e, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2e, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x23, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x73, 0x0a, 0x0d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x27, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x83, 0x02, 0x0a, 0x1d, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x10, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2c, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2e, 0x2e,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x70, 0x0a,
	0x10, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x2c, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x2e, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x0f, 0x5a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_power_estimation_proto_rawDescOnce sync.Once
	file_proto_power_estimation_proto_rawDescData = file_proto_power_estimation_proto_rawDesc
)

func file_proto_power_estimation_proto_rawDescGZIP() []byte {
	file_proto_power_estimation_proto_rawDescOnce.Do(func() {
		file_proto_power_estimation_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_power_estimation_proto_rawDescData)
	})
	return file_proto_power_estimation_proto_rawDescData
}

var file_proto_power_estimation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_power_estimation_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_power_estimation_proto_goTypes = []interface{}{
	(ModelTypeEnum)(0),                     // 0: estimate.power.ModelTypeEnum
	(*ServicePackageRequestMessage)(nil),   // 1: estimate.power.ServicePackageRequestMessage
	(*EstimateResponseServiceMessage)(nil), // 2: estimate.power.EstimateResponseServiceMessage
	(*EvaluateResponseServiceMessage)(nil), // 3: estimate.power.EvaluateResponseServiceMessage
	(*DataRequestMessage)(nil),             // 4: estimate.power.DataRequestMessage
	(*RawDataMessage)(nil),                 // 5: estimate.power.RawDataMessage
	(*PreparedDataMessage)(nil),            // 6: estimate.power.PreparedDataMessage
	(*EstimateRequestMessage)(nil),         // 7: estimate.power.EstimateRequestMessage
	(*EstimateResponseMessage)(nil),        // 8: estimate.power.EstimateResponseMessage
}
var file_proto_power_estimation_proto_depIdxs = []int32{
	0, // 0: estimate.power.ServicePackageRequestMessage.model_type:type_name -> estimate.power.ModelTypeEnum
	0, // 1: estimate.power.EstimateRequestMessage.model_type:type_name -> estimate.power.ModelTypeEnum
	4, // 2: estimate.power.FetchData.FetchDataService:input_type -> estimate.power.DataRequestMessage
	5, // 3: estimate.power.PrepareData.PrepareEstimateDataService:input_type -> estimate.power.RawDataMessage
	7, // 4: estimate.power.PowerEstimate.EstimateService:input_type -> estimate.power.EstimateRequestMessage
	1, // 5: estimate.power.PowerEstimationServicePackage.EstimatorService:input_type -> estimate.power.ServicePackageRequestMessage
	1, // 6: estimate.power.PowerEstimationServicePackage.EvaluatorService:input_type -> estimate.power.ServicePackageRequestMessage
	5, // 7: estimate.power.FetchData.FetchDataService:output_type -> estimate.power.RawDataMessage
	6, // 8: estimate.power.PrepareData.PrepareEstimateDataService:output_type -> estimate.power.PreparedDataMessage
	8, // 9: estimate.power.PowerEstimate.EstimateService:output_type -> estimate.power.EstimateResponseMessage
	2, // 10: estimate.power.PowerEstimationServicePackage.EstimatorService:output_type -> estimate.power.EstimateResponseServiceMessage
	3, // 11: estimate.power.PowerEstimationServicePackage.EvaluatorService:output_type -> estimate.power.EvaluateResponseServiceMessage
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_power_estimation_proto_init() }
func file_proto_power_estimation_proto_init() {
	if File_proto_power_estimation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_power_estimation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePackageRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_power_estimation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateResponseServiceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_power_estimation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateResponseServiceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_power_estimation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_power_estimation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_power_estimation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreparedDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_power_estimation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_power_estimation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_power_estimation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_proto_power_estimation_proto_goTypes,
		DependencyIndexes: file_proto_power_estimation_proto_depIdxs,
		EnumInfos:         file_proto_power_estimation_proto_enumTypes,
		MessageInfos:      file_proto_power_estimation_proto_msgTypes,
	}.Build()
	File_proto_power_estimation_proto = out.File
	file_proto_power_estimation_proto_rawDesc = nil
	file_proto_power_estimation_proto_goTypes = nil
	file_proto_power_estimation_proto_depIdxs = nil
}
