// Code generated by protoc-gen-go. DO NOT EDIT.
// source: prepareDataService/proto/prepareDataAPI.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PrepareRequestMessage struct {
	IndexNumber            []int64   `protobuf:"varint,1,rep,packed,name=index_number,json=indexNumber,proto3" json:"index_number,omitempty"`
	TimeAndDate            []float32 `protobuf:"fixed32,2,rep,packed,name=time_and_date,json=timeAndDate,proto3" json:"time_and_date,omitempty"`
	PortPropMotorCurrent   []float32 `protobuf:"fixed32,3,rep,packed,name=port_prop_motor_current,json=portPropMotorCurrent,proto3" json:"port_prop_motor_current,omitempty"`
	PortPropMotorPower     []float32 `protobuf:"fixed32,4,rep,packed,name=port_prop_motor_power,json=portPropMotorPower,proto3" json:"port_prop_motor_power,omitempty"`
	PortPropMotorSpeed     []float32 `protobuf:"fixed32,5,rep,packed,name=port_prop_motor_speed,json=portPropMotorSpeed,proto3" json:"port_prop_motor_speed,omitempty"`
	PortPropMotorVoltage   []float32 `protobuf:"fixed32,6,rep,packed,name=port_prop_motor_voltage,json=portPropMotorVoltage,proto3" json:"port_prop_motor_voltage,omitempty"`
	StbdPropMotorCurrent   []float32 `protobuf:"fixed32,7,rep,packed,name=stbd_prop_motor_current,json=stbdPropMotorCurrent,proto3" json:"stbd_prop_motor_current,omitempty"`
	StbdPropMotorPower     []float32 `protobuf:"fixed32,8,rep,packed,name=stbd_prop_motor_power,json=stbdPropMotorPower,proto3" json:"stbd_prop_motor_power,omitempty"`
	StbdPropMotorSpeed     []float32 `protobuf:"fixed32,9,rep,packed,name=stbd_prop_motor_speed,json=stbdPropMotorSpeed,proto3" json:"stbd_prop_motor_speed,omitempty"`
	StbdPropMotorVoltage   []float32 `protobuf:"fixed32,10,rep,packed,name=stbd_prop_motor_voltage,json=stbdPropMotorVoltage,proto3" json:"stbd_prop_motor_voltage,omitempty"`
	RudderOrderPort        []float32 `protobuf:"fixed32,11,rep,packed,name=rudder_order_port,json=rudderOrderPort,proto3" json:"rudder_order_port,omitempty"`
	RudderOrderStbd        []float32 `protobuf:"fixed32,12,rep,packed,name=rudder_order_stbd,json=rudderOrderStbd,proto3" json:"rudder_order_stbd,omitempty"`
	RudderPositionPort     []float32 `protobuf:"fixed32,13,rep,packed,name=rudder_position_port,json=rudderPositionPort,proto3" json:"rudder_position_port,omitempty"`
	RudderPositionStbd     []float32 `protobuf:"fixed32,14,rep,packed,name=rudder_position_stbd,json=rudderPositionStbd,proto3" json:"rudder_position_stbd,omitempty"`
	PropellerPitchPort     []float32 `protobuf:"fixed32,15,rep,packed,name=propeller_pitch_port,json=propellerPitchPort,proto3" json:"propeller_pitch_port,omitempty"`
	PropellerPitchStbd     []float32 `protobuf:"fixed32,16,rep,packed,name=propeller_pitch_stbd,json=propellerPitchStbd,proto3" json:"propeller_pitch_stbd,omitempty"`
	ShaftRpmIndicationPort []float32 `protobuf:"fixed32,17,rep,packed,name=shaft_rpm_indication_port,json=shaftRpmIndicationPort,proto3" json:"shaft_rpm_indication_port,omitempty"`
	ShaftRpmIndicationStbd []float32 `protobuf:"fixed32,18,rep,packed,name=shaft_rpm_indication_stbd,json=shaftRpmIndicationStbd,proto3" json:"shaft_rpm_indication_stbd,omitempty"`
	NavTime                []int64   `protobuf:"varint,19,rep,packed,name=nav_time,json=navTime,proto3" json:"nav_time,omitempty"`
	Latitude               []float32 `protobuf:"fixed32,20,rep,packed,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude              []float32 `protobuf:"fixed32,21,rep,packed,name=longitude,proto3" json:"longitude,omitempty"`
	Sog                    []float32 `protobuf:"fixed32,22,rep,packed,name=sog,proto3" json:"sog,omitempty"`
	Cog                    []float32 `protobuf:"fixed32,23,rep,packed,name=cog,proto3" json:"cog,omitempty"`
	Hdt                    []float32 `protobuf:"fixed32,24,rep,packed,name=hdt,proto3" json:"hdt,omitempty"`
	WindDirectionRelative  []int64   `protobuf:"varint,25,rep,packed,name=wind_direction_relative,json=windDirectionRelative,proto3" json:"wind_direction_relative,omitempty"`
	WindSpeed              []float32 `protobuf:"fixed32,26,rep,packed,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	Depth                  []float32 `protobuf:"fixed32,27,rep,packed,name=depth,proto3" json:"depth,omitempty"`
	EpochTime              []int64   `protobuf:"varint,28,rep,packed,name=epoch_time,json=epochTime,proto3" json:"epoch_time,omitempty"`
	BrashIce               []int64   `protobuf:"varint,29,rep,packed,name=brash_ice,json=brashIce,proto3" json:"brash_ice,omitempty"`
	RammingCount           []int64   `protobuf:"varint,30,rep,packed,name=ramming_count,json=rammingCount,proto3" json:"ramming_count,omitempty"`
	IceConcentration       []int64   `protobuf:"varint,31,rep,packed,name=ice_concentration,json=iceConcentration,proto3" json:"ice_concentration,omitempty"`
	IceThickness           []int64   `protobuf:"varint,32,rep,packed,name=ice_thickness,json=iceThickness,proto3" json:"ice_thickness,omitempty"`
	FlowSize               []int64   `protobuf:"varint,33,rep,packed,name=flow_size,json=flowSize,proto3" json:"flow_size,omitempty"`
	BeaufortNumber         []int64   `protobuf:"varint,34,rep,packed,name=beaufort_number,json=beaufortNumber,proto3" json:"beaufort_number,omitempty"`
	WaveDirection          []int64   `protobuf:"varint,35,rep,packed,name=wave_direction,json=waveDirection,proto3" json:"wave_direction,omitempty"`
	WaveHeightAve          []float32 `protobuf:"fixed32,36,rep,packed,name=wave_height_ave,json=waveHeightAve,proto3" json:"wave_height_ave,omitempty"`
	MaxSwellHeight         []float32 `protobuf:"fixed32,37,rep,packed,name=max_swell_height,json=maxSwellHeight,proto3" json:"max_swell_height,omitempty"`
	WaveLength             []float32 `protobuf:"fixed32,38,rep,packed,name=wave_length,json=waveLength,proto3" json:"wave_length,omitempty"`
	WavePeriodAve          []float32 `protobuf:"fixed32,39,rep,packed,name=wave_period_ave,json=wavePeriodAve,proto3" json:"wave_period_ave,omitempty"`
	EncounterFrequencyAve  []float32 `protobuf:"fixed32,40,rep,packed,name=encounter_frequency_ave,json=encounterFrequencyAve,proto3" json:"encounter_frequency_ave,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}  `json:"-"`
	XXX_unrecognized       []byte    `json:"-"`
	XXX_sizecache          int32     `json:"-"`
}

func (m *PrepareRequestMessage) Reset()         { *m = PrepareRequestMessage{} }
func (m *PrepareRequestMessage) String() string { return proto.CompactTextString(m) }
func (*PrepareRequestMessage) ProtoMessage()    {}
func (*PrepareRequestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_46b149cda5db2609, []int{0}
}

func (m *PrepareRequestMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareRequestMessage.Unmarshal(m, b)
}
func (m *PrepareRequestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareRequestMessage.Marshal(b, m, deterministic)
}
func (m *PrepareRequestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareRequestMessage.Merge(m, src)
}
func (m *PrepareRequestMessage) XXX_Size() int {
	return xxx_messageInfo_PrepareRequestMessage.Size(m)
}
func (m *PrepareRequestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareRequestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareRequestMessage proto.InternalMessageInfo

func (m *PrepareRequestMessage) GetIndexNumber() []int64 {
	if m != nil {
		return m.IndexNumber
	}
	return nil
}

func (m *PrepareRequestMessage) GetTimeAndDate() []float32 {
	if m != nil {
		return m.TimeAndDate
	}
	return nil
}

func (m *PrepareRequestMessage) GetPortPropMotorCurrent() []float32 {
	if m != nil {
		return m.PortPropMotorCurrent
	}
	return nil
}

func (m *PrepareRequestMessage) GetPortPropMotorPower() []float32 {
	if m != nil {
		return m.PortPropMotorPower
	}
	return nil
}

func (m *PrepareRequestMessage) GetPortPropMotorSpeed() []float32 {
	if m != nil {
		return m.PortPropMotorSpeed
	}
	return nil
}

func (m *PrepareRequestMessage) GetPortPropMotorVoltage() []float32 {
	if m != nil {
		return m.PortPropMotorVoltage
	}
	return nil
}

func (m *PrepareRequestMessage) GetStbdPropMotorCurrent() []float32 {
	if m != nil {
		return m.StbdPropMotorCurrent
	}
	return nil
}

func (m *PrepareRequestMessage) GetStbdPropMotorPower() []float32 {
	if m != nil {
		return m.StbdPropMotorPower
	}
	return nil
}

func (m *PrepareRequestMessage) GetStbdPropMotorSpeed() []float32 {
	if m != nil {
		return m.StbdPropMotorSpeed
	}
	return nil
}

func (m *PrepareRequestMessage) GetStbdPropMotorVoltage() []float32 {
	if m != nil {
		return m.StbdPropMotorVoltage
	}
	return nil
}

func (m *PrepareRequestMessage) GetRudderOrderPort() []float32 {
	if m != nil {
		return m.RudderOrderPort
	}
	return nil
}

func (m *PrepareRequestMessage) GetRudderOrderStbd() []float32 {
	if m != nil {
		return m.RudderOrderStbd
	}
	return nil
}

func (m *PrepareRequestMessage) GetRudderPositionPort() []float32 {
	if m != nil {
		return m.RudderPositionPort
	}
	return nil
}

func (m *PrepareRequestMessage) GetRudderPositionStbd() []float32 {
	if m != nil {
		return m.RudderPositionStbd
	}
	return nil
}

func (m *PrepareRequestMessage) GetPropellerPitchPort() []float32 {
	if m != nil {
		return m.PropellerPitchPort
	}
	return nil
}

func (m *PrepareRequestMessage) GetPropellerPitchStbd() []float32 {
	if m != nil {
		return m.PropellerPitchStbd
	}
	return nil
}

func (m *PrepareRequestMessage) GetShaftRpmIndicationPort() []float32 {
	if m != nil {
		return m.ShaftRpmIndicationPort
	}
	return nil
}

func (m *PrepareRequestMessage) GetShaftRpmIndicationStbd() []float32 {
	if m != nil {
		return m.ShaftRpmIndicationStbd
	}
	return nil
}

func (m *PrepareRequestMessage) GetNavTime() []int64 {
	if m != nil {
		return m.NavTime
	}
	return nil
}

func (m *PrepareRequestMessage) GetLatitude() []float32 {
	if m != nil {
		return m.Latitude
	}
	return nil
}

func (m *PrepareRequestMessage) GetLongitude() []float32 {
	if m != nil {
		return m.Longitude
	}
	return nil
}

func (m *PrepareRequestMessage) GetSog() []float32 {
	if m != nil {
		return m.Sog
	}
	return nil
}

func (m *PrepareRequestMessage) GetCog() []float32 {
	if m != nil {
		return m.Cog
	}
	return nil
}

func (m *PrepareRequestMessage) GetHdt() []float32 {
	if m != nil {
		return m.Hdt
	}
	return nil
}

func (m *PrepareRequestMessage) GetWindDirectionRelative() []int64 {
	if m != nil {
		return m.WindDirectionRelative
	}
	return nil
}

func (m *PrepareRequestMessage) GetWindSpeed() []float32 {
	if m != nil {
		return m.WindSpeed
	}
	return nil
}

func (m *PrepareRequestMessage) GetDepth() []float32 {
	if m != nil {
		return m.Depth
	}
	return nil
}

func (m *PrepareRequestMessage) GetEpochTime() []int64 {
	if m != nil {
		return m.EpochTime
	}
	return nil
}

func (m *PrepareRequestMessage) GetBrashIce() []int64 {
	if m != nil {
		return m.BrashIce
	}
	return nil
}

func (m *PrepareRequestMessage) GetRammingCount() []int64 {
	if m != nil {
		return m.RammingCount
	}
	return nil
}

func (m *PrepareRequestMessage) GetIceConcentration() []int64 {
	if m != nil {
		return m.IceConcentration
	}
	return nil
}

func (m *PrepareRequestMessage) GetIceThickness() []int64 {
	if m != nil {
		return m.IceThickness
	}
	return nil
}

func (m *PrepareRequestMessage) GetFlowSize() []int64 {
	if m != nil {
		return m.FlowSize
	}
	return nil
}

func (m *PrepareRequestMessage) GetBeaufortNumber() []int64 {
	if m != nil {
		return m.BeaufortNumber
	}
	return nil
}

func (m *PrepareRequestMessage) GetWaveDirection() []int64 {
	if m != nil {
		return m.WaveDirection
	}
	return nil
}

func (m *PrepareRequestMessage) GetWaveHeightAve() []float32 {
	if m != nil {
		return m.WaveHeightAve
	}
	return nil
}

func (m *PrepareRequestMessage) GetMaxSwellHeight() []float32 {
	if m != nil {
		return m.MaxSwellHeight
	}
	return nil
}

func (m *PrepareRequestMessage) GetWaveLength() []float32 {
	if m != nil {
		return m.WaveLength
	}
	return nil
}

func (m *PrepareRequestMessage) GetWavePeriodAve() []float32 {
	if m != nil {
		return m.WavePeriodAve
	}
	return nil
}

func (m *PrepareRequestMessage) GetEncounterFrequencyAve() []float32 {
	if m != nil {
		return m.EncounterFrequencyAve
	}
	return nil
}

type PrepareResponseMessage struct {
	PortPropMotorSpeed    []float32 `protobuf:"fixed32,1,rep,packed,name=port_prop_motor_speed,json=portPropMotorSpeed,proto3" json:"port_prop_motor_speed,omitempty"`
	StbdPropMotorSpeed    []float32 `protobuf:"fixed32,2,rep,packed,name=stbd_prop_motor_speed,json=stbdPropMotorSpeed,proto3" json:"stbd_prop_motor_speed,omitempty"`
	PropellerPitchPort    []float32 `protobuf:"fixed32,3,rep,packed,name=propeller_pitch_port,json=propellerPitchPort,proto3" json:"propeller_pitch_port,omitempty"`
	PropellerPitchStbd    []float32 `protobuf:"fixed32,4,rep,packed,name=propeller_pitch_stbd,json=propellerPitchStbd,proto3" json:"propeller_pitch_stbd,omitempty"`
	Sog                   []float32 `protobuf:"fixed32,5,rep,packed,name=sog,proto3" json:"sog,omitempty"`
	WindDirectionRelative []float32 `protobuf:"fixed32,6,rep,packed,name=wind_direction_relative,json=windDirectionRelative,proto3" json:"wind_direction_relative,omitempty"`
	WindSpeed             []float32 `protobuf:"fixed32,7,rep,packed,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	BeaufortNumber        []float32 `protobuf:"fixed32,8,rep,packed,name=beaufort_number,json=beaufortNumber,proto3" json:"beaufort_number,omitempty"`
	WaveDirection         []float32 `protobuf:"fixed32,9,rep,packed,name=wave_direction,json=waveDirection,proto3" json:"wave_direction,omitempty"`
	WaveLength            []float32 `protobuf:"fixed32,10,rep,packed,name=wave_length,json=waveLength,proto3" json:"wave_length,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}  `json:"-"`
	XXX_unrecognized      []byte    `json:"-"`
	XXX_sizecache         int32     `json:"-"`
}

func (m *PrepareResponseMessage) Reset()         { *m = PrepareResponseMessage{} }
func (m *PrepareResponseMessage) String() string { return proto.CompactTextString(m) }
func (*PrepareResponseMessage) ProtoMessage()    {}
func (*PrepareResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_46b149cda5db2609, []int{1}
}

func (m *PrepareResponseMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareResponseMessage.Unmarshal(m, b)
}
func (m *PrepareResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareResponseMessage.Marshal(b, m, deterministic)
}
func (m *PrepareResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareResponseMessage.Merge(m, src)
}
func (m *PrepareResponseMessage) XXX_Size() int {
	return xxx_messageInfo_PrepareResponseMessage.Size(m)
}
func (m *PrepareResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareResponseMessage proto.InternalMessageInfo

func (m *PrepareResponseMessage) GetPortPropMotorSpeed() []float32 {
	if m != nil {
		return m.PortPropMotorSpeed
	}
	return nil
}

func (m *PrepareResponseMessage) GetStbdPropMotorSpeed() []float32 {
	if m != nil {
		return m.StbdPropMotorSpeed
	}
	return nil
}

func (m *PrepareResponseMessage) GetPropellerPitchPort() []float32 {
	if m != nil {
		return m.PropellerPitchPort
	}
	return nil
}

func (m *PrepareResponseMessage) GetPropellerPitchStbd() []float32 {
	if m != nil {
		return m.PropellerPitchStbd
	}
	return nil
}

func (m *PrepareResponseMessage) GetSog() []float32 {
	if m != nil {
		return m.Sog
	}
	return nil
}

func (m *PrepareResponseMessage) GetWindDirectionRelative() []float32 {
	if m != nil {
		return m.WindDirectionRelative
	}
	return nil
}

func (m *PrepareResponseMessage) GetWindSpeed() []float32 {
	if m != nil {
		return m.WindSpeed
	}
	return nil
}

func (m *PrepareResponseMessage) GetBeaufortNumber() []float32 {
	if m != nil {
		return m.BeaufortNumber
	}
	return nil
}

func (m *PrepareResponseMessage) GetWaveDirection() []float32 {
	if m != nil {
		return m.WaveDirection
	}
	return nil
}

func (m *PrepareResponseMessage) GetWaveLength() []float32 {
	if m != nil {
		return m.WaveLength
	}
	return nil
}

func init() {
	proto.RegisterType((*PrepareRequestMessage)(nil), "prepareData.PrepareRequestMessage")
	proto.RegisterType((*PrepareResponseMessage)(nil), "prepareData.PrepareResponseMessage")
}

func init() {
	proto.RegisterFile("prepareDataService/proto/prepareDataAPI.proto", fileDescriptor_46b149cda5db2609)
}

var fileDescriptor_46b149cda5db2609 = []byte{
	// 937 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xff, 0x6f, 0x1b, 0x35,
	0x14, 0xd7, 0x9a, 0x75, 0x6d, 0x9c, 0xa6, 0x5f, 0x4c, 0xd3, 0xba, 0xdd, 0xc6, 0xba, 0x94, 0x6d,
	0x15, 0x88, 0x86, 0x2f, 0x62, 0x12, 0x12, 0x42, 0x2a, 0x2d, 0x88, 0x4a, 0x0c, 0xa2, 0x64, 0xe2,
	0x07, 0x7e, 0x39, 0x39, 0xbe, 0xd7, 0x9c, 0xc5, 0x9d, 0x7d, 0xd8, 0x4e, 0x52, 0xf6, 0x0f, 0xf0,
	0x4f, 0xf1, 0xc7, 0x21, 0x3f, 0xdf, 0x25, 0x69, 0x7a, 0x07, 0xec, 0x97, 0x36, 0xfe, 0x7c, 0xf1,
	0x7b, 0xcf, 0x67, 0x3f, 0x9b, 0x7c, 0x9a, 0x1b, 0xc8, 0xb9, 0x81, 0x2b, 0xee, 0xf8, 0x10, 0xcc,
	0x54, 0x0a, 0xe8, 0xe5, 0x46, 0x3b, 0xdd, 0x5b, 0x22, 0x2e, 0xfa, 0xd7, 0xe7, 0x08, 0xd2, 0xd6,
	0x12, 0xda, 0xfd, 0xab, 0x4d, 0x3a, 0xfd, 0x30, 0x1e, 0xc0, 0x1f, 0x13, 0xb0, 0xee, 0x0d, 0x58,
	0xcb, 0xc7, 0x40, 0x9f, 0x93, 0x2d, 0xa9, 0x62, 0xb8, 0x8d, 0xd4, 0x24, 0x1b, 0x81, 0x61, 0x0f,
	0x4e, 0x1a, 0x67, 0x8d, 0x41, 0x0b, 0xb1, 0x9f, 0x11, 0xa2, 0x5d, 0xd2, 0x76, 0x32, 0x83, 0x88,
	0xab, 0x38, 0x8a, 0xb9, 0x03, 0xb6, 0x76, 0xd2, 0x38, 0x5b, 0x1b, 0xb4, 0x3c, 0x78, 0xa1, 0xe2,
	0x2b, 0xee, 0x80, 0x7e, 0x45, 0x0e, 0x73, 0x6d, 0x5c, 0x94, 0x1b, 0x9d, 0x47, 0x99, 0x76, 0xda,
	0x44, 0x62, 0x62, 0x0c, 0x28, 0xc7, 0x1a, 0xa8, 0xde, 0xf7, 0x74, 0xdf, 0xe8, 0xfc, 0x8d, 0x27,
	0x2f, 0x03, 0x47, 0x3f, 0x27, 0x9d, 0x55, 0x5b, 0xae, 0x67, 0x60, 0xd8, 0x43, 0x34, 0xd1, 0x3b,
	0xa6, 0xbe, 0x67, 0xaa, 0x2c, 0x36, 0x07, 0x88, 0xd9, 0x7a, 0x85, 0x65, 0xe8, 0x99, 0xaa, 0xe4,
	0xa6, 0x3a, 0x75, 0x7c, 0x0c, 0xec, 0x51, 0x45, 0x72, 0xbf, 0x06, 0xce, 0xdb, 0xac, 0x1b, 0xc5,
	0x55, 0x35, 0x6d, 0x04, 0x9b, 0xa7, 0xab, 0x6a, 0x5a, 0xb5, 0x85, 0x9a, 0x36, 0x43, 0x82, 0x77,
	0x4c, 0xf3, 0x9a, 0x56, 0x2d, 0xa1, 0xa6, 0x66, 0x85, 0x65, 0x5e, 0xd3, 0xaa, 0xa5, 0xac, 0x89,
	0x54, 0x24, 0x57, 0xd6, 0xf4, 0x31, 0xd9, 0x33, 0x93, 0x38, 0x06, 0x13, 0x69, 0xe3, 0xff, 0xfa,
	0xc2, 0x59, 0x0b, 0x0d, 0x3b, 0x81, 0xf8, 0xc5, 0xe3, 0x7d, 0x6d, 0xdc, 0x3d, 0xad, 0x9f, 0x90,
	0x6d, 0xdd, 0xd3, 0x0e, 0xdd, 0x28, 0xa6, 0x9f, 0x91, 0xfd, 0x42, 0x9b, 0x6b, 0x2b, 0x9d, 0xd4,
	0x2a, 0x4c, 0xdd, 0x0e, 0x05, 0x04, 0xae, 0x5f, 0x50, 0x38, 0x7b, 0x85, 0x03, 0x03, 0x6c, 0x57,
	0x39, 0xca, 0x18, 0xbe, 0x5a, 0x48, 0x53, 0x6f, 0x92, 0x4e, 0x24, 0x21, 0xc6, 0x4e, 0xf1, 0xe1,
	0x4b, 0xae, 0xef, 0xa9, 0x32, 0xc6, 0xaa, 0x03, 0x63, 0xec, 0x56, 0x39, 0x30, 0xc6, 0xd7, 0xe4,
	0xc8, 0x26, 0xfc, 0xc6, 0x45, 0x26, 0xcf, 0x22, 0xa9, 0x62, 0x29, 0xf8, 0xa2, 0x98, 0x3d, 0xb4,
	0x1d, 0xa0, 0x60, 0x90, 0x67, 0xd7, 0x73, 0x1a, 0x83, 0xd5, 0x59, 0x31, 0x22, 0xad, 0xb3, 0x62,
	0xd4, 0x23, 0xb2, 0xa9, 0xf8, 0x34, 0xf2, 0x07, 0x8a, 0x7d, 0x80, 0x07, 0x70, 0x43, 0xf1, 0xe9,
	0x5b, 0x99, 0x01, 0x3d, 0x26, 0x9b, 0x29, 0x77, 0xd2, 0x4d, 0x62, 0x60, 0xfb, 0x38, 0xc9, 0x7c,
	0x4c, 0x9f, 0x90, 0x66, 0xaa, 0xd5, 0x38, 0x90, 0x1d, 0x24, 0x17, 0x00, 0xdd, 0x25, 0x0d, 0xab,
	0xc7, 0xec, 0x00, 0x71, 0xff, 0xd3, 0x23, 0x42, 0x8f, 0xd9, 0x61, 0x40, 0x44, 0x40, 0x92, 0xd8,
	0x31, 0x16, 0x90, 0x24, 0x76, 0xf4, 0x35, 0x39, 0x9c, 0x49, 0x7f, 0xd0, 0xa5, 0x01, 0x81, 0xf9,
	0x1b, 0xf0, 0x01, 0xa7, 0xc0, 0x8e, 0x30, 0xb3, 0x8e, 0xa7, 0xaf, 0x4a, 0x76, 0x50, 0x90, 0xf4,
	0x29, 0x21, 0xe8, 0x0b, 0xfb, 0xf6, 0x38, 0x24, 0xe3, 0x91, 0xb0, 0x5d, 0xf7, 0xc9, 0x7a, 0x0c,
	0xb9, 0x4b, 0xd8, 0x63, 0x64, 0xc2, 0xc0, 0x9b, 0x20, 0xd7, 0x22, 0x09, 0x95, 0x3f, 0xc1, 0xf9,
	0x9b, 0x88, 0x60, 0xed, 0x8f, 0x49, 0x73, 0x64, 0xb8, 0x4d, 0x22, 0x29, 0x80, 0x3d, 0x45, 0x76,
	0x13, 0x81, 0x6b, 0x01, 0xf4, 0x94, 0xb4, 0x0d, 0xcf, 0x32, 0xa9, 0xc6, 0x91, 0xd0, 0x13, 0xe5,
	0xd8, 0x87, 0x28, 0xd8, 0x2a, 0xc0, 0x4b, 0x8f, 0xd1, 0x4f, 0xc8, 0x9e, 0x14, 0x10, 0x09, 0xad,
	0x04, 0x28, 0x67, 0x70, 0xc5, 0xd9, 0x33, 0x14, 0xee, 0x4a, 0x01, 0x97, 0xcb, 0xb8, 0x9f, 0xd1,
	0x8b, 0x5d, 0x22, 0xc5, 0xef, 0x0a, 0xac, 0x65, 0x27, 0x61, 0x46, 0x29, 0xe0, 0x6d, 0x89, 0xf9,
	0x9c, 0x6e, 0x52, 0x3d, 0x8b, 0xac, 0x7c, 0x07, 0xec, 0x79, 0xc8, 0xc9, 0x03, 0x43, 0xf9, 0x0e,
	0xe8, 0x2b, 0xb2, 0x33, 0x02, 0x3e, 0xb9, 0xf1, 0xcd, 0xa6, 0xe8, 0xa7, 0x5d, 0x94, 0x6c, 0x97,
	0x70, 0xd1, 0x52, 0x5f, 0x90, 0xed, 0x19, 0x9f, 0xc2, 0x62, 0x95, 0xd9, 0x29, 0xea, 0xda, 0x1e,
	0x9d, 0x2f, 0x2e, 0x7d, 0x49, 0x76, 0x50, 0x96, 0x80, 0x1c, 0x27, 0x2e, 0xe2, 0x53, 0x60, 0x1f,
	0xe1, 0xfa, 0xa1, 0xee, 0x47, 0x44, 0x2f, 0xa6, 0x40, 0xcf, 0xc8, 0x6e, 0xc6, 0x6f, 0x23, 0x3b,
	0x83, 0x34, 0x2d, 0xc4, 0xec, 0x05, 0x0a, 0xb7, 0x33, 0x7e, 0x3b, 0xf4, 0x70, 0x10, 0xd3, 0x67,
	0xa4, 0x85, 0x33, 0xa6, 0xa0, 0xc6, 0x2e, 0x61, 0x2f, 0x51, 0x44, 0x3c, 0xf4, 0x13, 0x22, 0xf3,
	0x90, 0x39, 0x18, 0xa9, 0x63, 0x0c, 0xf9, 0x6a, 0x11, 0xb2, 0x8f, 0xa8, 0x0f, 0xf9, 0x9a, 0x1c,
	0x82, 0xc2, 0x85, 0x07, 0x13, 0xdd, 0x18, 0x7f, 0xa9, 0x28, 0xf1, 0x27, 0xea, 0xcf, 0x50, 0xdf,
	0x99, 0xd3, 0x3f, 0x94, 0xec, 0xc5, 0x14, 0xba, 0x7f, 0x37, 0xc8, 0xc1, 0xfc, 0x26, 0xb2, 0xb9,
	0x56, 0x16, 0xca, 0xab, 0xa8, 0xb6, 0xb3, 0x3f, 0xa8, 0xed, 0xec, 0xb5, 0x8d, 0x73, 0xad, 0xb6,
	0x71, 0xd6, 0x75, 0x91, 0xc6, 0x7b, 0x77, 0x91, 0x87, 0xb5, 0x5d, 0xa4, 0x38, 0x7a, 0xeb, 0x8b,
	0xa3, 0xf7, 0x2f, 0xc7, 0x2a, 0x5c, 0x41, 0xff, 0xeb, 0x58, 0x6d, 0xac, 0x1e, 0xab, 0x8a, 0x0d,
	0x17, 0x6e, 0x99, 0xff, 0xde, 0x70, 0xcd, 0xc5, 0x57, 0x5d, 0x6c, 0xb8, 0x95, 0xed, 0x41, 0x56,
	0xb7, 0xc7, 0x17, 0x8e, 0xb4, 0xfa, 0x8b, 0x77, 0x05, 0x05, 0x72, 0x5c, 0x0c, 0xbf, 0xb7, 0x4e,
	0x66, 0xdc, 0x2d, 0xbf, 0x4e, 0x68, 0xf7, 0x7c, 0xe9, 0x0d, 0x72, 0x5e, 0xf9, 0xfe, 0x38, 0x3e,
	0xad, 0xd6, 0xdc, 0xd9, 0x19, 0xdf, 0x7d, 0xfb, 0xdb, 0x37, 0x63, 0xe9, 0x92, 0xc9, 0xe8, 0x5c,
	0xe8, 0xac, 0xa7, 0xa4, 0x48, 0x74, 0xca, 0xed, 0x68, 0xa2, 0x54, 0x2f, 0xe3, 0xd6, 0x81, 0xb1,
	0x3d, 0x6b, 0x44, 0xaf, 0xee, 0x81, 0x34, 0x7a, 0x84, 0xff, 0xbe, 0xfc, 0x27, 0x00, 0x00, 0xff,
	0xff, 0x9f, 0xc3, 0xc3, 0x0a, 0x43, 0x09, 0x00, 0x00,
}
