// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fetchDataService/proto/fetchDataAPI.proto

package fetchData

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FetchDataRequestMessage struct {
	InputFile            string   `protobuf:"bytes,1,opt,name=input_file,json=inputFile,proto3" json:"input_file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchDataRequestMessage) Reset()         { *m = FetchDataRequestMessage{} }
func (m *FetchDataRequestMessage) String() string { return proto.CompactTextString(m) }
func (*FetchDataRequestMessage) ProtoMessage()    {}
func (*FetchDataRequestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f6eee019a5b129f, []int{0}
}

func (m *FetchDataRequestMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchDataRequestMessage.Unmarshal(m, b)
}
func (m *FetchDataRequestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchDataRequestMessage.Marshal(b, m, deterministic)
}
func (m *FetchDataRequestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchDataRequestMessage.Merge(m, src)
}
func (m *FetchDataRequestMessage) XXX_Size() int {
	return xxx_messageInfo_FetchDataRequestMessage.Size(m)
}
func (m *FetchDataRequestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchDataRequestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FetchDataRequestMessage proto.InternalMessageInfo

func (m *FetchDataRequestMessage) GetInputFile() string {
	if m != nil {
		return m.InputFile
	}
	return ""
}

type FetchDataResponseMessage struct {
	IndexNumber            []int64   `protobuf:"varint,1,rep,packed,name=index_number,json=indexNumber,proto3" json:"index_number,omitempty"`
	TimeAndDate            []float32 `protobuf:"fixed32,2,rep,packed,name=time_and_date,json=timeAndDate,proto3" json:"time_and_date,omitempty"`
	PortPropMotorCurrent   []float32 `protobuf:"fixed32,3,rep,packed,name=port_prop_motor_current,json=portPropMotorCurrent,proto3" json:"port_prop_motor_current,omitempty"`
	PortPropMotorPower     []float32 `protobuf:"fixed32,4,rep,packed,name=port_prop_motor_power,json=portPropMotorPower,proto3" json:"port_prop_motor_power,omitempty"`
	PortPropMotorSpeed     []float32 `protobuf:"fixed32,5,rep,packed,name=port_prop_motor_speed,json=portPropMotorSpeed,proto3" json:"port_prop_motor_speed,omitempty"`
	PortPropMotorVoltage   []float32 `protobuf:"fixed32,6,rep,packed,name=port_prop_motor_voltage,json=portPropMotorVoltage,proto3" json:"port_prop_motor_voltage,omitempty"`
	StbdPropMotorCurrent   []float32 `protobuf:"fixed32,7,rep,packed,name=stbd_prop_motor_current,json=stbdPropMotorCurrent,proto3" json:"stbd_prop_motor_current,omitempty"`
	StbdPropMotorPower     []float32 `protobuf:"fixed32,8,rep,packed,name=stbd_prop_motor_power,json=stbdPropMotorPower,proto3" json:"stbd_prop_motor_power,omitempty"`
	StbdPropMotorSpeed     []float32 `protobuf:"fixed32,9,rep,packed,name=stbd_prop_motor_speed,json=stbdPropMotorSpeed,proto3" json:"stbd_prop_motor_speed,omitempty"`
	StbdPropMotorVoltage   []float32 `protobuf:"fixed32,10,rep,packed,name=stbd_prop_motor_voltage,json=stbdPropMotorVoltage,proto3" json:"stbd_prop_motor_voltage,omitempty"`
	RudderOrderPort        []float32 `protobuf:"fixed32,11,rep,packed,name=rudder_order_port,json=rudderOrderPort,proto3" json:"rudder_order_port,omitempty"`
	RudderOrderStbd        []float32 `protobuf:"fixed32,12,rep,packed,name=rudder_order_stbd,json=rudderOrderStbd,proto3" json:"rudder_order_stbd,omitempty"`
	RudderPositionPort     []float32 `protobuf:"fixed32,13,rep,packed,name=rudder_position_port,json=rudderPositionPort,proto3" json:"rudder_position_port,omitempty"`
	RudderPositionStbd     []float32 `protobuf:"fixed32,14,rep,packed,name=rudder_position_stbd,json=rudderPositionStbd,proto3" json:"rudder_position_stbd,omitempty"`
	PropellerPitchPort     []float32 `protobuf:"fixed32,15,rep,packed,name=propeller_pitch_port,json=propellerPitchPort,proto3" json:"propeller_pitch_port,omitempty"`
	PropellerPitchStbd     []float32 `protobuf:"fixed32,16,rep,packed,name=propeller_pitch_stbd,json=propellerPitchStbd,proto3" json:"propeller_pitch_stbd,omitempty"`
	ShaftRpmIndicationPort []float32 `protobuf:"fixed32,17,rep,packed,name=shaft_rpm_indication_port,json=shaftRpmIndicationPort,proto3" json:"shaft_rpm_indication_port,omitempty"`
	ShaftRpmIndicationStbd []float32 `protobuf:"fixed32,18,rep,packed,name=shaft_rpm_indication_stbd,json=shaftRpmIndicationStbd,proto3" json:"shaft_rpm_indication_stbd,omitempty"`
	NavTime                []int64   `protobuf:"varint,19,rep,packed,name=nav_time,json=navTime,proto3" json:"nav_time,omitempty"`
	Latitude               []float32 `protobuf:"fixed32,20,rep,packed,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude              []float32 `protobuf:"fixed32,21,rep,packed,name=longitude,proto3" json:"longitude,omitempty"`
	Sog                    []float32 `protobuf:"fixed32,22,rep,packed,name=sog,proto3" json:"sog,omitempty"`
	Cog                    []float32 `protobuf:"fixed32,23,rep,packed,name=cog,proto3" json:"cog,omitempty"`
	Hdt                    []float32 `protobuf:"fixed32,24,rep,packed,name=hdt,proto3" json:"hdt,omitempty"`
	WindDirectionRelative  []int64   `protobuf:"varint,25,rep,packed,name=wind_direction_relative,json=windDirectionRelative,proto3" json:"wind_direction_relative,omitempty"`
	WindSpeed              []float32 `protobuf:"fixed32,26,rep,packed,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	Depth                  []float32 `protobuf:"fixed32,27,rep,packed,name=depth,proto3" json:"depth,omitempty"`
	EpochTime              []int64   `protobuf:"varint,28,rep,packed,name=epoch_time,json=epochTime,proto3" json:"epoch_time,omitempty"`
	BrashIce               []int64   `protobuf:"varint,29,rep,packed,name=brash_ice,json=brashIce,proto3" json:"brash_ice,omitempty"`
	RammingCount           []int64   `protobuf:"varint,30,rep,packed,name=ramming_count,json=rammingCount,proto3" json:"ramming_count,omitempty"`
	IceConcentration       []int64   `protobuf:"varint,31,rep,packed,name=ice_concentration,json=iceConcentration,proto3" json:"ice_concentration,omitempty"`
	IceThickness           []int64   `protobuf:"varint,32,rep,packed,name=ice_thickness,json=iceThickness,proto3" json:"ice_thickness,omitempty"`
	FlowSize               []int64   `protobuf:"varint,33,rep,packed,name=flow_size,json=flowSize,proto3" json:"flow_size,omitempty"`
	BeaufortNumber         []int64   `protobuf:"varint,34,rep,packed,name=beaufort_number,json=beaufortNumber,proto3" json:"beaufort_number,omitempty"`
	WaveDirection          []int64   `protobuf:"varint,35,rep,packed,name=wave_direction,json=waveDirection,proto3" json:"wave_direction,omitempty"`
	WaveHeightAve          []float32 `protobuf:"fixed32,36,rep,packed,name=wave_height_ave,json=waveHeightAve,proto3" json:"wave_height_ave,omitempty"`
	MaxSwellHeight         []float32 `protobuf:"fixed32,37,rep,packed,name=max_swell_height,json=maxSwellHeight,proto3" json:"max_swell_height,omitempty"`
	WaveLength             []float32 `protobuf:"fixed32,38,rep,packed,name=wave_length,json=waveLength,proto3" json:"wave_length,omitempty"`
	WavePeriodAve          []float32 `protobuf:"fixed32,39,rep,packed,name=wave_period_ave,json=wavePeriodAve,proto3" json:"wave_period_ave,omitempty"`
	EncounterFrequencyAve  []float32 `protobuf:"fixed32,40,rep,packed,name=encounter_frequency_ave,json=encounterFrequencyAve,proto3" json:"encounter_frequency_ave,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}  `json:"-"`
	XXX_unrecognized       []byte    `json:"-"`
	XXX_sizecache          int32     `json:"-"`
}

func (m *FetchDataResponseMessage) Reset()         { *m = FetchDataResponseMessage{} }
func (m *FetchDataResponseMessage) String() string { return proto.CompactTextString(m) }
func (*FetchDataResponseMessage) ProtoMessage()    {}
func (*FetchDataResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f6eee019a5b129f, []int{1}
}

func (m *FetchDataResponseMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchDataResponseMessage.Unmarshal(m, b)
}
func (m *FetchDataResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchDataResponseMessage.Marshal(b, m, deterministic)
}
func (m *FetchDataResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchDataResponseMessage.Merge(m, src)
}
func (m *FetchDataResponseMessage) XXX_Size() int {
	return xxx_messageInfo_FetchDataResponseMessage.Size(m)
}
func (m *FetchDataResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchDataResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FetchDataResponseMessage proto.InternalMessageInfo

func (m *FetchDataResponseMessage) GetIndexNumber() []int64 {
	if m != nil {
		return m.IndexNumber
	}
	return nil
}

func (m *FetchDataResponseMessage) GetTimeAndDate() []float32 {
	if m != nil {
		return m.TimeAndDate
	}
	return nil
}

func (m *FetchDataResponseMessage) GetPortPropMotorCurrent() []float32 {
	if m != nil {
		return m.PortPropMotorCurrent
	}
	return nil
}

func (m *FetchDataResponseMessage) GetPortPropMotorPower() []float32 {
	if m != nil {
		return m.PortPropMotorPower
	}
	return nil
}

func (m *FetchDataResponseMessage) GetPortPropMotorSpeed() []float32 {
	if m != nil {
		return m.PortPropMotorSpeed
	}
	return nil
}

func (m *FetchDataResponseMessage) GetPortPropMotorVoltage() []float32 {
	if m != nil {
		return m.PortPropMotorVoltage
	}
	return nil
}

func (m *FetchDataResponseMessage) GetStbdPropMotorCurrent() []float32 {
	if m != nil {
		return m.StbdPropMotorCurrent
	}
	return nil
}

func (m *FetchDataResponseMessage) GetStbdPropMotorPower() []float32 {
	if m != nil {
		return m.StbdPropMotorPower
	}
	return nil
}

func (m *FetchDataResponseMessage) GetStbdPropMotorSpeed() []float32 {
	if m != nil {
		return m.StbdPropMotorSpeed
	}
	return nil
}

func (m *FetchDataResponseMessage) GetStbdPropMotorVoltage() []float32 {
	if m != nil {
		return m.StbdPropMotorVoltage
	}
	return nil
}

func (m *FetchDataResponseMessage) GetRudderOrderPort() []float32 {
	if m != nil {
		return m.RudderOrderPort
	}
	return nil
}

func (m *FetchDataResponseMessage) GetRudderOrderStbd() []float32 {
	if m != nil {
		return m.RudderOrderStbd
	}
	return nil
}

func (m *FetchDataResponseMessage) GetRudderPositionPort() []float32 {
	if m != nil {
		return m.RudderPositionPort
	}
	return nil
}

func (m *FetchDataResponseMessage) GetRudderPositionStbd() []float32 {
	if m != nil {
		return m.RudderPositionStbd
	}
	return nil
}

func (m *FetchDataResponseMessage) GetPropellerPitchPort() []float32 {
	if m != nil {
		return m.PropellerPitchPort
	}
	return nil
}

func (m *FetchDataResponseMessage) GetPropellerPitchStbd() []float32 {
	if m != nil {
		return m.PropellerPitchStbd
	}
	return nil
}

func (m *FetchDataResponseMessage) GetShaftRpmIndicationPort() []float32 {
	if m != nil {
		return m.ShaftRpmIndicationPort
	}
	return nil
}

func (m *FetchDataResponseMessage) GetShaftRpmIndicationStbd() []float32 {
	if m != nil {
		return m.ShaftRpmIndicationStbd
	}
	return nil
}

func (m *FetchDataResponseMessage) GetNavTime() []int64 {
	if m != nil {
		return m.NavTime
	}
	return nil
}

func (m *FetchDataResponseMessage) GetLatitude() []float32 {
	if m != nil {
		return m.Latitude
	}
	return nil
}

func (m *FetchDataResponseMessage) GetLongitude() []float32 {
	if m != nil {
		return m.Longitude
	}
	return nil
}

func (m *FetchDataResponseMessage) GetSog() []float32 {
	if m != nil {
		return m.Sog
	}
	return nil
}

func (m *FetchDataResponseMessage) GetCog() []float32 {
	if m != nil {
		return m.Cog
	}
	return nil
}

func (m *FetchDataResponseMessage) GetHdt() []float32 {
	if m != nil {
		return m.Hdt
	}
	return nil
}

func (m *FetchDataResponseMessage) GetWindDirectionRelative() []int64 {
	if m != nil {
		return m.WindDirectionRelative
	}
	return nil
}

func (m *FetchDataResponseMessage) GetWindSpeed() []float32 {
	if m != nil {
		return m.WindSpeed
	}
	return nil
}

func (m *FetchDataResponseMessage) GetDepth() []float32 {
	if m != nil {
		return m.Depth
	}
	return nil
}

func (m *FetchDataResponseMessage) GetEpochTime() []int64 {
	if m != nil {
		return m.EpochTime
	}
	return nil
}

func (m *FetchDataResponseMessage) GetBrashIce() []int64 {
	if m != nil {
		return m.BrashIce
	}
	return nil
}

func (m *FetchDataResponseMessage) GetRammingCount() []int64 {
	if m != nil {
		return m.RammingCount
	}
	return nil
}

func (m *FetchDataResponseMessage) GetIceConcentration() []int64 {
	if m != nil {
		return m.IceConcentration
	}
	return nil
}

func (m *FetchDataResponseMessage) GetIceThickness() []int64 {
	if m != nil {
		return m.IceThickness
	}
	return nil
}

func (m *FetchDataResponseMessage) GetFlowSize() []int64 {
	if m != nil {
		return m.FlowSize
	}
	return nil
}

func (m *FetchDataResponseMessage) GetBeaufortNumber() []int64 {
	if m != nil {
		return m.BeaufortNumber
	}
	return nil
}

func (m *FetchDataResponseMessage) GetWaveDirection() []int64 {
	if m != nil {
		return m.WaveDirection
	}
	return nil
}

func (m *FetchDataResponseMessage) GetWaveHeightAve() []float32 {
	if m != nil {
		return m.WaveHeightAve
	}
	return nil
}

func (m *FetchDataResponseMessage) GetMaxSwellHeight() []float32 {
	if m != nil {
		return m.MaxSwellHeight
	}
	return nil
}

func (m *FetchDataResponseMessage) GetWaveLength() []float32 {
	if m != nil {
		return m.WaveLength
	}
	return nil
}

func (m *FetchDataResponseMessage) GetWavePeriodAve() []float32 {
	if m != nil {
		return m.WavePeriodAve
	}
	return nil
}

func (m *FetchDataResponseMessage) GetEncounterFrequencyAve() []float32 {
	if m != nil {
		return m.EncounterFrequencyAve
	}
	return nil
}

func init() {
	proto.RegisterType((*FetchDataRequestMessage)(nil), "fetchData.FetchDataRequestMessage")
	proto.RegisterType((*FetchDataResponseMessage)(nil), "fetchData.FetchDataResponseMessage")
}

func init() {
	proto.RegisterFile("fetchDataService/proto/fetchDataAPI.proto", fileDescriptor_9f6eee019a5b129f)
}

var fileDescriptor_9f6eee019a5b129f = []byte{
	// 845 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x95, 0x5f, 0x6f, 0xdb, 0x36,
	0x14, 0xc5, 0x91, 0x7a, 0x6d, 0x63, 0x26, 0x4e, 0x1c, 0x2e, 0xa9, 0x99, 0xb4, 0x5d, 0x53, 0x67,
	0x6d, 0xbd, 0x0d, 0x48, 0xf7, 0x07, 0x2b, 0xb6, 0xc7, 0x20, 0x41, 0xb0, 0x00, 0xeb, 0x66, 0xd8,
	0xc5, 0x5e, 0xf6, 0x40, 0xd0, 0xd4, 0xb5, 0x45, 0x4c, 0x22, 0x35, 0x8a, 0xb6, 0xb3, 0x7e, 0x84,
	0x7d, 0xea, 0xe2, 0x5e, 0x5a, 0x4a, 0xe3, 0x28, 0x2f, 0x41, 0xf4, 0x3b, 0xe7, 0xf0, 0xde, 0x4b,
	0x4b, 0x24, 0xfb, 0x66, 0x0a, 0x41, 0xa7, 0x17, 0x2a, 0xa8, 0x31, 0xf8, 0x85, 0xd1, 0xf0, 0xb6,
	0xf0, 0x2e, 0xb8, 0xb7, 0x35, 0x3e, 0x1b, 0x5e, 0x9d, 0x12, 0xe2, 0xed, 0x9a, 0xf5, 0x7f, 0x61,
	0xbd, 0xcb, 0xea, 0x61, 0x04, 0xff, 0xce, 0xa1, 0x0c, 0xef, 0xa1, 0x2c, 0xd5, 0x0c, 0xf8, 0x73,
	0xc6, 0x8c, 0x2d, 0xe6, 0x41, 0x4e, 0x4d, 0x06, 0x62, 0xe3, 0x78, 0x63, 0xd0, 0x1e, 0xb5, 0x89,
	0x5c, 0x9a, 0x0c, 0xfa, 0xff, 0x77, 0x98, 0xf8, 0x2c, 0x5a, 0x16, 0xce, 0x96, 0x50, 0x65, 0x5f,
	0xb2, 0x6d, 0x63, 0x13, 0xb8, 0x96, 0x76, 0x9e, 0x4f, 0xc0, 0x8b, 0x8d, 0xe3, 0xd6, 0xa0, 0x35,
	0xda, 0x22, 0xf6, 0x07, 0x21, 0xde, 0x67, 0x9d, 0x60, 0x72, 0x90, 0xca, 0x26, 0x32, 0x51, 0x01,
	0xc4, 0x83, 0xe3, 0xd6, 0xe0, 0xc1, 0x68, 0x0b, 0xe1, 0x99, 0x4d, 0x2e, 0x54, 0x00, 0xfe, 0x33,
	0xeb, 0x15, 0xce, 0x07, 0x59, 0x78, 0x57, 0xc8, 0xdc, 0x05, 0xe7, 0xa5, 0x9e, 0x7b, 0x0f, 0x36,
	0x88, 0x16, 0xb9, 0xf7, 0x51, 0x1e, 0x7a, 0x57, 0xbc, 0x47, 0xf1, 0x3c, 0x6a, 0xfc, 0x07, 0x76,
	0xb0, 0x1e, 0x2b, 0xdc, 0x12, 0xbc, 0xf8, 0x82, 0x42, 0xfc, 0x56, 0x68, 0x88, 0x4a, 0x53, 0xa4,
	0x2c, 0x00, 0x12, 0xf1, 0xb0, 0x21, 0x32, 0x46, 0xa5, 0xa9, 0xb9, 0x85, 0xcb, 0x82, 0x9a, 0x81,
	0x78, 0xd4, 0xd0, 0xdc, 0x5f, 0x51, 0xc3, 0x58, 0x19, 0x26, 0x49, 0xd3, 0x4c, 0x8f, 0x63, 0x0c,
	0xe5, 0xa6, 0x99, 0xd6, 0x63, 0x71, 0xa6, 0xcd, 0xd8, 0xe0, 0xad, 0x50, 0x3d, 0xd3, 0x7a, 0x24,
	0xce, 0xd4, 0x6e, 0x88, 0xd4, 0x33, 0xad, 0x47, 0xaa, 0x99, 0x58, 0x43, 0x73, 0xd5, 0x4c, 0xdf,
	0xb2, 0x3d, 0x3f, 0x4f, 0x12, 0xf0, 0xd2, 0x79, 0xfc, 0x8b, 0x83, 0x8b, 0x2d, 0x0a, 0xec, 0x46,
	0xe1, 0x4f, 0xe4, 0x43, 0xe7, 0xc3, 0x1d, 0x2f, 0x2e, 0x28, 0xb6, 0xef, 0x78, 0xc7, 0x61, 0x92,
	0xf0, 0xef, 0xd9, 0xfe, 0xca, 0x5b, 0xb8, 0xd2, 0x04, 0xe3, 0x6c, 0x5c, 0xba, 0x13, 0x07, 0x88,
	0xda, 0x70, 0x25, 0xd1, 0xea, 0x0d, 0x09, 0x2a, 0xb0, 0xd3, 0x94, 0xa8, 0x6a, 0xe0, 0xb4, 0x90,
	0x65, 0x18, 0x32, 0x41, 0xa7, 0xb1, 0xc6, 0xee, 0xea, 0x87, 0xaf, 0xb4, 0x21, 0x4a, 0x55, 0x8d,
	0xf5, 0x04, 0xd5, 0xe8, 0x36, 0x25, 0xa8, 0xc6, 0xaf, 0xec, 0xb0, 0x4c, 0xd5, 0x34, 0x48, 0x5f,
	0xe4, 0xd2, 0xd8, 0xc4, 0x68, 0x75, 0x33, 0xcc, 0x1e, 0xc5, 0x9e, 0x90, 0x61, 0x54, 0xe4, 0x57,
	0xb5, 0x4c, 0xc5, 0xee, 0x8b, 0x52, 0x45, 0x7e, 0x5f, 0x94, 0xaa, 0x1e, 0xb2, 0x4d, 0xab, 0x16,
	0x12, 0x3f, 0x28, 0xf1, 0x25, 0x7d, 0x80, 0x8f, 0xad, 0x5a, 0x7c, 0x30, 0x39, 0xf0, 0x23, 0xb6,
	0x99, 0xa9, 0x60, 0xc2, 0x3c, 0x01, 0xb1, 0x4f, 0x8b, 0xd4, 0xcf, 0xfc, 0x19, 0x6b, 0x67, 0xce,
	0xce, 0xa2, 0x78, 0x40, 0xe2, 0x0d, 0xe0, 0x5d, 0xd6, 0x2a, 0xdd, 0x4c, 0x3c, 0x21, 0x8e, 0xff,
	0x22, 0xd1, 0x6e, 0x26, 0x7a, 0x91, 0xe8, 0x48, 0xd2, 0x24, 0x08, 0x11, 0x49, 0x9a, 0x04, 0xfe,
	0x8e, 0xf5, 0x96, 0x06, 0x3f, 0x74, 0xe3, 0x41, 0x53, 0xff, 0x1e, 0xb0, 0xe0, 0x02, 0xc4, 0x21,
	0x75, 0x76, 0x80, 0xf2, 0x45, 0xa5, 0x8e, 0x56, 0x22, 0x9e, 0x41, 0x94, 0x8b, 0xef, 0xed, 0x51,
	0x6c, 0x06, 0x49, 0x7c, 0x5d, 0xf7, 0xd9, 0xc3, 0x04, 0x8a, 0x90, 0x8a, 0xa7, 0xa4, 0xc4, 0x07,
	0x0c, 0x41, 0xe1, 0x74, 0x1a, 0x27, 0x7f, 0x46, 0xeb, 0xb7, 0x89, 0xd0, 0xec, 0x4f, 0x59, 0x7b,
	0xe2, 0x55, 0x99, 0x4a, 0xa3, 0x41, 0x3c, 0x27, 0x75, 0x93, 0xc0, 0x95, 0x06, 0x7e, 0xc2, 0x3a,
	0x5e, 0xe5, 0xb9, 0xb1, 0x33, 0xa9, 0xdd, 0xdc, 0x06, 0xf1, 0x15, 0x19, 0xb6, 0x57, 0xf0, 0x1c,
	0x19, 0xff, 0x8e, 0xed, 0x19, 0x0d, 0x52, 0x3b, 0xab, 0xc1, 0x06, 0x4f, 0x3b, 0x2e, 0x5e, 0x90,
	0xb1, 0x6b, 0x34, 0x9c, 0x7f, 0xce, 0x71, 0x45, 0x34, 0x87, 0xd4, 0xe8, 0x7f, 0x2c, 0x94, 0xa5,
	0x38, 0x8e, 0x2b, 0x1a, 0x0d, 0x1f, 0x2a, 0x86, 0x3d, 0x4d, 0x33, 0xb7, 0x94, 0xa5, 0xf9, 0x08,
	0xe2, 0x65, 0xec, 0x09, 0xc1, 0xd8, 0x7c, 0x04, 0xfe, 0x86, 0xed, 0x4e, 0x40, 0xcd, 0xa7, 0x78,
	0xd8, 0xac, 0xce, 0xd3, 0x3e, 0x59, 0x76, 0x2a, 0xbc, 0x3a, 0x52, 0x5f, 0xb1, 0x9d, 0xa5, 0x5a,
	0xc0, 0xcd, 0x2e, 0x8b, 0x13, 0xf2, 0x75, 0x90, 0xd6, 0x9b, 0xcb, 0x5f, 0xb3, 0x5d, 0xb2, 0xa5,
	0x60, 0x66, 0x69, 0x90, 0x6a, 0x01, 0xe2, 0x6b, 0xda, 0x3f, 0xf2, 0xfd, 0x46, 0xf4, 0x6c, 0x01,
	0x7c, 0xc0, 0xba, 0xb9, 0xba, 0x96, 0xe5, 0x12, 0xb2, 0x6c, 0x65, 0x16, 0xaf, 0xc8, 0xb8, 0x93,
	0xab, 0xeb, 0x31, 0xe2, 0x68, 0xe6, 0x2f, 0xd8, 0x16, 0xad, 0x98, 0x81, 0x9d, 0x85, 0x54, 0xbc,
	0x26, 0x13, 0x43, 0xf4, 0x3b, 0x91, 0xba, 0x64, 0x01, 0xde, 0xb8, 0x84, 0x4a, 0xbe, 0xb9, 0x29,
	0x39, 0x24, 0x8a, 0x25, 0xdf, 0xb1, 0x1e, 0x58, 0xda, 0x78, 0xf0, 0x72, 0xea, 0xf1, 0x42, 0xb2,
	0xfa, 0x3f, 0xf2, 0x0f, 0xc8, 0x7f, 0x50, 0xcb, 0x97, 0x95, 0x7a, 0xb6, 0x80, 0x1f, 0x53, 0xd6,
	0xae, 0xef, 0x22, 0xfe, 0x37, 0xeb, 0x5e, 0xae, 0xdd, 0x85, 0xbc, 0x7f, 0x5a, 0xdf, 0x79, 0xa7,
	0xf7, 0x5c, 0x78, 0x47, 0x27, 0xcd, 0x9e, 0x5b, 0x37, 0xdb, 0xe4, 0x11, 0x5d, 0xa1, 0x3f, 0x7d,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x82, 0x93, 0xe1, 0x9a, 0x6f, 0x07, 0x00, 0x00,
}
