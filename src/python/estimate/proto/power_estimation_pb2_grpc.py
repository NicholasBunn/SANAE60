# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import power_estimation_pb2 as proto_dot_power__estimation__pb2


class FetchDataStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchDataService = channel.unary_unary(
                '/estimate.power.FetchData/FetchDataService',
                request_serializer=proto_dot_power__estimation__pb2.DataRequestMessage.SerializeToString,
                response_deserializer=proto_dot_power__estimation__pb2.RawDataMessage.FromString,
                )


class FetchDataServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FetchDataService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FetchDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchDataService': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchDataService,
                    request_deserializer=proto_dot_power__estimation__pb2.DataRequestMessage.FromString,
                    response_serializer=proto_dot_power__estimation__pb2.RawDataMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'estimate.power.FetchData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FetchData(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FetchDataService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/estimate.power.FetchData/FetchDataService',
            proto_dot_power__estimation__pb2.DataRequestMessage.SerializeToString,
            proto_dot_power__estimation__pb2.RawDataMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PrepareDataStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PrepareEstimateDataService = channel.unary_unary(
                '/estimate.power.PrepareData/PrepareEstimateDataService',
                request_serializer=proto_dot_power__estimation__pb2.RawDataMessage.SerializeToString,
                response_deserializer=proto_dot_power__estimation__pb2.PreparedDataMessage.FromString,
                )


class PrepareDataServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PrepareEstimateDataService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PrepareDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PrepareEstimateDataService': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareEstimateDataService,
                    request_deserializer=proto_dot_power__estimation__pb2.RawDataMessage.FromString,
                    response_serializer=proto_dot_power__estimation__pb2.PreparedDataMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'estimate.power.PrepareData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PrepareData(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PrepareEstimateDataService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/estimate.power.PrepareData/PrepareEstimateDataService',
            proto_dot_power__estimation__pb2.RawDataMessage.SerializeToString,
            proto_dot_power__estimation__pb2.PreparedDataMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PowerEstimateStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EstimateService = channel.unary_unary(
                '/estimate.power.PowerEstimate/EstimateService',
                request_serializer=proto_dot_power__estimation__pb2.EstimateRequestMessage.SerializeToString,
                response_deserializer=proto_dot_power__estimation__pb2.EstimateResponseMessage.FromString,
                )


class PowerEstimateServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EstimateService(self, request, context):
        """Change this to stream response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PowerEstimateServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EstimateService': grpc.unary_unary_rpc_method_handler(
                    servicer.EstimateService,
                    request_deserializer=proto_dot_power__estimation__pb2.EstimateRequestMessage.FromString,
                    response_serializer=proto_dot_power__estimation__pb2.EstimateResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'estimate.power.PowerEstimate', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PowerEstimate(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EstimateService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/estimate.power.PowerEstimate/EstimateService',
            proto_dot_power__estimation__pb2.EstimateRequestMessage.SerializeToString,
            proto_dot_power__estimation__pb2.EstimateResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PowerEstimationServicePackageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EstimateService = channel.unary_unary(
                '/estimate.power.PowerEstimationServicePackage/EstimateService',
                request_serializer=proto_dot_power__estimation__pb2.ServicePackageRequestMessage.SerializeToString,
                response_deserializer=proto_dot_power__estimation__pb2.EstimateResponseServiceMessage.FromString,
                )
        self.EvaluateService = channel.unary_unary(
                '/estimate.power.PowerEstimationServicePackage/EvaluateService',
                request_serializer=proto_dot_power__estimation__pb2.ServicePackageRequestMessage.SerializeToString,
                response_deserializer=proto_dot_power__estimation__pb2.EvaluateResponseServiceMessage.FromString,
                )


class PowerEstimationServicePackageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EstimateService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvaluateService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PowerEstimationServicePackageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EstimateService': grpc.unary_unary_rpc_method_handler(
                    servicer.EstimateService,
                    request_deserializer=proto_dot_power__estimation__pb2.ServicePackageRequestMessage.FromString,
                    response_serializer=proto_dot_power__estimation__pb2.EstimateResponseServiceMessage.SerializeToString,
            ),
            'EvaluateService': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateService,
                    request_deserializer=proto_dot_power__estimation__pb2.ServicePackageRequestMessage.FromString,
                    response_serializer=proto_dot_power__estimation__pb2.EvaluateResponseServiceMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'estimate.power.PowerEstimationServicePackage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PowerEstimationServicePackage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EstimateService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/estimate.power.PowerEstimationServicePackage/EstimateService',
            proto_dot_power__estimation__pb2.ServicePackageRequestMessage.SerializeToString,
            proto_dot_power__estimation__pb2.EstimateResponseServiceMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EvaluateService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/estimate.power.PowerEstimationServicePackage/EvaluateService',
            proto_dot_power__estimation__pb2.ServicePackageRequestMessage.SerializeToString,
            proto_dot_power__estimation__pb2.EvaluateResponseServiceMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
