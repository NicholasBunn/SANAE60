// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package estimate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EstimatePowerClient is the client API for EstimatePower service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstimatePowerClient interface {
	EstimatePowerService(ctx context.Context, in *EstimateRequestMessage, opts ...grpc.CallOption) (*EstimateResponseMessage, error)
}

type estimatePowerClient struct {
	cc grpc.ClientConnInterface
}

func NewEstimatePowerClient(cc grpc.ClientConnInterface) EstimatePowerClient {
	return &estimatePowerClient{cc}
}

func (c *estimatePowerClient) EstimatePowerService(ctx context.Context, in *EstimateRequestMessage, opts ...grpc.CallOption) (*EstimateResponseMessage, error) {
	out := new(EstimateResponseMessage)
	err := c.cc.Invoke(ctx, "/estimate.EstimatePower/EstimatePowerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstimatePowerServer is the server API for EstimatePower service.
// All implementations must embed UnimplementedEstimatePowerServer
// for forward compatibility
type EstimatePowerServer interface {
	EstimatePowerService(context.Context, *EstimateRequestMessage) (*EstimateResponseMessage, error)
	mustEmbedUnimplementedEstimatePowerServer()
}

// UnimplementedEstimatePowerServer must be embedded to have forward compatible implementations.
type UnimplementedEstimatePowerServer struct {
}

func (UnimplementedEstimatePowerServer) EstimatePowerService(context.Context, *EstimateRequestMessage) (*EstimateResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimatePowerService not implemented")
}
func (UnimplementedEstimatePowerServer) mustEmbedUnimplementedEstimatePowerServer() {}

// UnsafeEstimatePowerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstimatePowerServer will
// result in compilation errors.
type UnsafeEstimatePowerServer interface {
	mustEmbedUnimplementedEstimatePowerServer()
}

func RegisterEstimatePowerServer(s grpc.ServiceRegistrar, srv EstimatePowerServer) {
	s.RegisterService(&EstimatePower_ServiceDesc, srv)
}

func _EstimatePower_EstimatePowerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimatePowerServer).EstimatePowerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estimate.EstimatePower/EstimatePowerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimatePowerServer).EstimatePowerService(ctx, req.(*EstimateRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// EstimatePower_ServiceDesc is the grpc.ServiceDesc for EstimatePower service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EstimatePower_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "estimate.EstimatePower",
	HandlerType: (*EstimatePowerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimatePowerService",
			Handler:    _EstimatePower_EstimatePowerService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "estimateService/proto/estimateAPI.proto",
}
